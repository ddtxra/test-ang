{"version":3,"sources":["app/js/np.cart.service.js","app/js/np.config.js","app/js/np.export.js","app/js/np.flash.js","app/js/np.js","app/js/np.search.js","app/js/np.search.service.js","app/js/np.search.ui.js","app/js/np.viewer.js","app/js/tracker/np.tracker.service.js","app/js/user/np.user.application.service.js","app/js/user/np.user.js","app/js/user/np.user.protein.lists.js","app/js/user/np.user.protein.lists.service.js","app/js/user/np.user.protein.lists.ui.js","app/js/user/np.user.query.js","app/js/version/np.version-directive.js","app/js/version/np.version.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrxzilapUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjnnLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"build/js/app.js","sourcesContent":["'use strict';\n\nvar CartService = angular.module('np.cart', ['np.user.protein.lists.service']);\n\nCartService.factory('Cart', [\n    'config',\n    'flash',\n    function (config, flash) {\n\n        var elements;\n\n\n        var Cart = function () {\n            elements = sessionStorage.cart ? this.getCartFromStorage().elements : [];\n        };\n\n\n        // entry changes status ( selected => unselected ; unselected => selected; )\n        Cart.prototype.change = function (docId) {\n            var found = _.indexOf(elements, docId);\n\n            // it was found so remove\n            if (found != -1) {\n                elements = _.without(elements, docId);\n                flash(\"alert-info\", docId + \" successfully cleared from clipboard\")\n            } else {\t// not found so add\n                elements.push(docId);\n                flash(\"alert-info\", docId + \" successfully added to clipboard\")\n            }\n\n            this.saveCartToStorage();\n\n            return found;\n        };\n\n\n        Cart.prototype.isInCart = function (docId) {\n            return (_.indexOf(elements, docId) != -1);\n        };\n\n        Cart.prototype.getCartFromStorage = function () {\n            return angular.fromJson(sessionStorage.cart);\n        };\n\n        Cart.prototype.saveCartToStorage = function () {\n            sessionStorage.cart = angular.toJson({elements: elements});\n        };\n\n        Cart.prototype.setCart = function (docIds) {\n            elements = _.union(elements, docIds);\n            this.saveCartToStorage();\n        };\n\n        Cart.prototype.removeFromCart = function (docIds) {\n            elements = _.difference(elements, docIds);\n            this.saveCartToStorage();\n        };\n\n        Cart.prototype.getCartSize = function () {\n            return elements.length;\n        };\n\n        Cart.prototype.emptyCart = function () {\n            elements = [];\n            this.saveCartToStorage();\n        };\n\n        Cart.prototype.getElements = function () {\n            return elements;\n        };\n\n        Cart.prototype.inCart = function (id) {\n            return elements.indexOf(id) != -1;\n        };\n\n        Cart.prototype.remove = function (id) {\n            if (elements.length == 1)\n                elements = [];\n            else elements = elements.splice(id, 1);\n        };\n\n        var cart = new Cart();\n        return cart;\n    }]);\n\n","'use strict';\n\n\n//\n//Define the application global configuration\n\nangular.module('np.config', []).factory('config', [\n    '$http','npSettings',\n    function ($http, npSettings) {\n\n        // api configuration\n        var defaultApi = {\n\n            environment: npSettings.environment,\n            API_URL: npSettings.base,\n            NP1_URL: npSettings.np1,\n            AUTH_CALLBACK_URL: npSettings.callback,\n\n            githubQueriesEdit : \"https://github.com/calipho-sib/nextprot-queries/edit/develop/src/main/resources/nextprot-queries/\",\n\n\n            ontology: {\n                /* Ontology filters */\n                \"enzymeclassification\": \"Enzyme classification\",\n                \"evidencecodeontology\": \"Evidence Code\",\n                \"evocanatomicalsystem\": \"eVOC Anatomical System\",\n                \"evoccelltype\": \"eVOC Cell Type\",\n                \"evocdevelopmentstage\": \"eVOC Development Stage\",\n                \"evocpathology\": \"eVOC Pathology\",\n                \"gobiologicalprocess\": \"GO Biological Process\",\n                \"gocellularcomponent\": \"GO Cellular Component\",\n                \"gomolecularfunction\": \"GO Molecular Function\",\n                \"mesh\": \"MeSH\",\n                \"meshanatomy\": \"MeSH Anatomy\",\n                \"mim\": \"MIM\",\n                \"ncithesaurus\": \"NCI Thesaurus\",\n                \"ncimetathesaurus\": \"NCI Metathesaurus\",\n                \"aanpbiosequenceannotation\": \"neXtProt annotation\",\n                \"aanpfamily\": \"neXtProt family\",\n                \"aanptissues\": \"neXtProt human anatomy\",\n                \"nonstandardaminoacid\": \"Non-standard amino acid\",\n                \"organelle\": \"Organelle\",\n                \"sequenceontology\": \"Sequence ontology\",\n                \"stage\": \"Bgee developmental stage\",\n                \"upcarbohydrate\": \"UniProt carbohydrate\",\n                \"upcellline\": \"neXtProt cell line\",\n                \"updisease\": \"UniProt disease\",\n                \"updomain\": \"UniProt domain\",\n                \"upfamily\": \"UniProt family\",\n                \"upkeywords\": \"UniProt keyword\",\n                \"upmetal\": \"UniProt metal\",\n                \"uppathways\": \"UniPathway\",\n                \"upposttranslationalmodifications\": \"UniProt post-translational modification\",\n                \"upsubcellularlocation\": \"UniProt subcellular location\",\n                \"upsubcellularorientation\": \"Uniprot subcellular orientation\",\n                \"upsubcellulartopology\": \"UniProt subcellular topology\",\n                \"uptopology\": \"UniProt topology\",\n\n                /* Publication filters */\n                \"curated\": \"Cited for annotation\",\n                \"largescale\": \"Large scale data\",\n                \"computed\": \"Not cited for annotation\",\n\n                /* Entries filters */\n                \"filterexpressionprofile\": \"Expression profile\",\n                \"filterproteomics\": \"Proteomics\",\n                \"filterstructure\": \"3D structure\",\n                \"filtermutagenesis\": \"Mutagenesis\",\n                \"filterdisease\": \"Disease\"\n            },\n\n\n            widgets: {\n                sort: {\n                    asc: \"icon-arrow-up\",\n                    desc: \"icon-arrow-down\"\n                },\n                proteins: {\n                    sort:{\n                        '':{text:\"score\",image:\"icon-arrow-down\", isAsc:false},\n                        'gene':{text:'gene',image:\"icon-arrow-up\", isAsc:true},\n                        'protein':{text:'protein',image:\"icon-arrow-up\", isAsc:true},\n                        'family':{text:'family',image:\"icon-arrow-up\", isAsc:true},\n                        'chromosome':{text:'chr',image:\"icon-arrow-up\", isAsc:true},\n                        'ac':{text:'ac',image:\"icon-arrow-up\", isAsc:true},\n                        'length':{text:'len',image:\"icon-arrow-up\", isAsc:true}\n                    },\n                    gold: true,\n                    qualityLabel: {\n                        'gold': 'Gold only',\n                        'gold-and-silver': 'Include silver'\n                    }\n\n                },\n                publications: {\n                    sort:{\n                        '':{text:\"\",image:\"icon-arrow-down\", isAsc:false}\n                    },\n                    gold: false\n                },\n                terms: {\n                    sort:{\n                        '':{text:\"score\",image:\"icon-arrow-down\", isAsc:false},\n                        'name':{text:\"name\",image:\"icon-arrow-up\", isAsc:true}\n                    },\n                    gold: false\n                },\n                repositories: {\n                    aNextprotRep: { /* 'a' is used to appear first */\n                        title: \"training\",\n                        tooltip: \"Queries used for example\",\n                        icon: \"icon-certificate\"\n                    },\n                    communityRep: {\n                        title: \"community\",\n                        tooltip: \"Public repository used to share knowledge in the community\",\n                        icon: \"icon-globe\"\n                    },\n                    privateRep: {\n                        title: \"your private\",\n                        tooltip: \"your private repository\",\n                        icon: \"icon-user\"\n                    }\n                }\n            },\n\n\n            entityMapping: {\n                proteins: 'entry.json',\n                publications: 'publication.json',\n                terms: 'term.json',\n                'entry.json': 'proteins',\n                'publication.json': 'publications',\n                'term.json': 'terms'\n            },\n\n            paginate: {\n                steps: 8,\n                defaultRows: 50\n            }\n\n        };\n        //\n        // global application configuration\n        var defaultConfig = {\n            api: defaultApi\n        }\n\n\n        return defaultConfig;\n    }\n]);\n","(function (angular, undefined) {\n    'use strict';\n\n    angular.module('np.export', ['np.tracker'])\n        .factory('exportService', exportService)\n        .controller('ExportCtrl', ExportCtrl);\n\n    ExportCtrl.$inject = ['Tracker', '$scope', '$routeParams', 'config', 'exportService'];\n    function ExportCtrl(Tracker, $scope, $routeParams, config, exportService) {\n\n        var multiEntryFormats = null;\n        var singleEntryFormats = null;\n\n        $scope.selectedFormat = null;\n        $scope.views = null;\n        $scope.selectedView = null;\n\n        $scope.export = exportService;\n\n        $scope.currentSearch = null;\n        $scope.currentQuery = null;\n        $scope.currentList = null;\n\n        (function initEntryFormats() {\n\n            multiEntryFormats = Object.keys(exportService.templates);\n            singleEntryFormats = multiEntryFormats.slice(0);\n\n            // removing 'txt' export for single entry: useless to export one accession number line\n            if (!$scope.export.exportObjectType) {\n\n                var index = singleEntryFormats.indexOf('txt');\n                if (index > -1) {\n                    singleEntryFormats.splice(index, 1);\n                }\n                index = singleEntryFormats.indexOf('xls');\n                if (index > -1) {\n                    singleEntryFormats.splice(index, 1);\n                }\n            }\n        })();\n\n        $scope.getFormats = function () {\n\n            return (!$scope.export.exportObjectType) ? singleEntryFormats : multiEntryFormats;\n        };\n\n        $scope.setSelectedFormat = function (format) {\n            $scope.selectedFormat = format;\n            $scope.views = exportService.templates[format];\n            $scope.selectedView = $scope.views[0];\n            $scope.isSubPartHidden = (exportService.templates[format].length == 0);\n        };\n\n        $scope.setSelectedView = function (view) {\n            $scope.selectedView = view.replace(new RegExp('^-+', ''), '');\n        };\n\n        $scope.gaTrackDownloadEvent = function (closeModal) {\n\n            Tracker.trackDownloadEvent($scope.export.exportObjectType, $scope.selectedFormat, $scope.selectedView);\n\n            if (closeModal) $scope.dismiss();\n        };\n\n\n\n\n        $scope.getFileExportURL = function () {\n\n            //multiple entries\n            if ($scope.export.exportObjectType) {\n\n                var exportURL = config.api.API_URL + \"/export/entries\";\n                exportURL += _addSuffixURLSubPart($scope.selectedView, $scope.selectedFormat);\n\n                exportURL += \"?\" + $scope.export.exportObjectType + \"=\" + window.encodeURIComponent($scope.export.exportObjectIdentifier);\n\n                //TODO\n                if ($routeParams.filter)\n                    exportURL += \"&filter=\" + $routeParams.filter;\n\n                if ($routeParams.quality)\n                    exportURL += \"&quality=\" + $routeParams.quality;\n\n                if ($routeParams.sort)\n                    exportURL += \"&sort=\" + $routeParams.sort;\n\n                if ($routeParams.order)\n                    exportURL += \"&order=\" + $routeParams.order;\n\n                return exportURL;\n\n            } else { // export one entry\n\n                var exportURL = config.api.API_URL + \"/entry\";\n\n                exportURL += \"/\" + $scope.export.exportObjectIdentifier;\n                exportURL += _addSuffixURLSubPart($scope.selectedView, $scope.selectedFormat);\n                return exportURL;\n            }\n        };\n\n        //initialize with xml\n        $scope.setSelectedFormat(\"xml\");\n    }\n\n\n    exportService.$inject = ['config', '$http', 'flash', '$log'];\n    function exportService(config, $http, flash, $log) {\n\n        var ExportService = function () {\n\n            var self = this;\n            this.userQuery = null;\n            this.userList = null;\n\n            this.exportObjectType = null;\n            this.exportObjectIdentifier = null;\n\n            $http.get(config.api.API_URL+'/export/templates.json')\n                .success(function (result) {\n\n                    self.templates = {\n                        \"xml\": result['xml'],\n                        \"json\": result['xml'],\n                        \"txt\": [],\n                        \"fasta\": [],\n                        \"xls\": [\"entries\",\"isoforms\"]\n                        //\"peff\": []\n                    };\n                })\n                .error(function (data, status) {\n                    var message = status+\": cannot access views from '\"+config.api.API_URL+\"/export/templates.json'\";\n                    $log.error(message);\n                    flash(\"alert-info\", message);\n                });\n        };\n\n        ExportService.prototype.setExportEntry = function (entry) {\n            this.exportObjectType = null;\n            this.exportObjectIdentifier = entry;\n            this.exportTitle = \"Download entry '\" + entry + \"'\";\n        };\n\n        ExportService.prototype.reset = function () {\n            this.userQuery = null;\n            this.userList = null;\n            this.searchQuery = null;\n        };\n\n        ExportService.prototype.setExportParameters = function (params) {\n\n            if (params.queryId) { // neXtProt Query example NXQ_000001\n                this.exportObjectType = \"queryId\";\n                this.exportObjectIdentifier = this.userQuery.publicId;\n                this.exportTitle = \"Download entries for query: '\" + this.userQuery.publicId + \"'\";\n            } else if (params.listId) { //a simple list\n                this.exportObjectType = \"listId\";\n                this.exportObjectIdentifier = this.userList.publicId;\n                this.exportTitle = \"Download entries for list '\" + this.userList.publicId + \"'\";\n            } else if (params.query) {  //result from a query\n                this.exportObjectType = \"query\";\n                this.exportObjectIdentifier = params.query;\n                this.exportTitle = \"Download entries for simple query\";\n            }else if (params.sparql) {  //result from a query\n                this.exportObjectType = \"sparql\";\n                this.exportObjectIdentifier = params.sparql;\n                this.exportTitle = \"Download entries for sparql query\";\n            }\n\n        };\n\n        return new ExportService();\n    }\n\n\n\n    // PRIVATE METHODS /////////////////////////////////////////\n    function _addSuffixURLSubPart (subpart, format){\n        var suffix = \"\";\n        if (subpart && (subpart !== 'full-entry')) {\n            suffix += \"/\" + subpart;\n        }\n        suffix += \".\" + format;\n        return suffix;\n    }\n\n\n})(angular); //global variable\n","(function (angular, undefined) {'use strict';\n\n\nvar flash = angular.module('np.flash', [])\n\t.factory('flash', flashImp)\n      .directive('flashMessages', flashMessages); \n\n\nflashImp.$inject=['$rootScope', '$timeout'];\nfunction flashImp($rootScope, $timeout) {\n    var messages = [];\n    var reset;\n    var cleanup = function() {\n    \treset = $timeout(function() { messages = []; });\n    \t//$timeout.cancel(reset);\n    };\n\n    var emit = function() {\n    \t$rootScope.$emit('flash:message', messages, cleanup);\n    };\n\n    $rootScope.$on('$locationChangeSuccess', emit);\n\n    var asMessage = function(level, text) {\n      if (!text) {\n        text = level;\n        level = 'alert-info';\n      }\n      return { level: level, text: text };\n    };\n\n    var asArrayOfMessages = function(level, text) {\n      if (level instanceof Array) return level.map(function(message) {\n        return message.text ? message : asMessage(message);\n      });\n      return text ? [{ level: level, text: text }] : [asMessage(level)];\n    };\n\n    var flash = function(level, text) {\n      emit(messages = asArrayOfMessages(level, text));\n\n      if(level == 'alert-info' || level == 'alert-success'){\n        //to remove the messages after a timeout\n        $timeout(function() { messages = []; emit();}, 3000);\n      }\n    };\n\n    ['alert-danger', 'alert-warning', 'alert-info', 'alert-success'].forEach(function (level) {\n      flash[level] = function (text) { flash(level, text); };\n    });\n\n    return flash;\n};\n\n// Mario style (with the template in the js)\n    flashMessages.$inject = [];\n    function flashMessages() {\n        var directive = {restrict: 'EA', replace: true};\n\n        directive.template =\n            '<ul style=\"position: fixed;top: -2px;left: 15%;right: 15%;z-index:10010;opacity:0.9\">' +\n            '<li style=\"list-style: none \" ng-repeat=\"m in messages\">' +\n            '<div  class=\"flashmsg alert {{m.level}} alert-dismissible\" role=\"alert\">' +\n            '<button type=\"button\" class=\"close\" data-dismiss=\"alert\"><span aria-hidden=\"true\">&times;</span>' +\n            '<span class=\"sr-only\">Close</span></button>' +\n            '{{m.text}}' +\n            '</div>' +\n            '</li>' +\n            '</ul>';\n\n        directive.controller = ['$scope', '$rootScope', function ($scope, $rootScope) {\n            $rootScope.$on('flash:message', function (_, messages, done) {\n                $scope.messages = messages;\n                done();\n            });\n        }];\n\n        return directive;\n    }\n\n\n\n// Olivier style (with the template in the html)\n//.directive('flash', ['$rootScope',function ($rootScope) {\n//    return function (scope, elm, attrs) {\n//        $rootScope.$on('flash:message', function(_, messages, done) {\n//            scope.messages = messages;\n//            done();\n//        });\n//    };\n//}]);\n})(angular);\n","(function (angular, undefined) {\n    'use strict';\n\n//Declare application level module which depends on additional filters and services (most of them are custom)\n    var App = angular.module('np', [\n        'ngSanitize',\n        'ngResource',\n        'ngRoute',\n        'ngAnimate',\n        'ngCookies',\n        'ipCookie',\n        'npHelp',\n        '$strap.directives',\n        'np.flash',\n        'np.config',\n        'np.user',\n        'np.cart',\n        'np.user.protein.lists',\n        'np.search',\n        'np.viewer',\n        'np.export',\n        'np.version',\n        'ui.codemirror',\n        'auth0', 'angular-storage', 'angular-jwt', 'logglyLogger'\n    ]).config(configApplication)\n        .factory('errorInterceptor', errorInterceptor)\n        .run(runApplication);\n\n    ///// TODO: fixing; we are breaking the DRY principle and it is really bad (see duplication in nextprot-snorql/app/js/app.config.js) !!!!\n    //Environment that should be set from outside //TODO should replace this using GRUNT\n    var nxEnvironment = \"NX_ENV\"; //env can be replaced, by dev, alpha or pro\n    //var apiBase = \"http://localhost:8080/nextprot-api-web\"; //default\n    var apiBase = \"http://dev-api.nextprot.org\"; //default\n\n    var np1Base = \"https://www.nextprot.org/\";\n    //var np1Base = 'http://uat-web1/';\n\n\n    if (nxEnvironment.indexOf(\"NX_\") == -1) // means an environment has been set, sed command has done some magic tricks\n    {\n        apiBase = 'http://' + nxEnvironment.toLowerCase() + '-api.nextprot.org';\n        if (nxEnvironment.toLowerCase() === \"pro\") {\n            apiBase = 'https://api.nextprot.org'; // Don't forget https!\n            np1Base = 'http://www.nextprot.org';\n        }\n    }\n\n    // main application settings\n    App.constant('npSettings', {\n        environment: nxEnvironment,\n        base: apiBase,   //API URL\n        np1: np1Base,    //NP1 URL\n        callback: window.location.origin,\n        auth0_cliendId: '7vS32LzPoIR1Y0JKahOvUCgGbn94AcFW'\n    })\n\n\n    // init application components\n    runApplication.$inject = ['config', 'gitHubContent', 'npSettings']\n    function runApplication(config, gitHubContent, npSettings) {\n        gitHubContent.initialize({\n            helpPath: config.api.API_URL + '/assets/rdfhelp.json',\n            helpTitle: 'Generalities',\n            root: 'help', // specify a URI prefix\n            githubRepo: '/',\n            githubApi:apiBase,\n            githubEditPage : \"https://github.com/calipho-sib/nextprot-docs/edit/master/\",\n            githubToken : null\n        });\n    };\n\n\n    // config application $route, $location and $http services.\n    configApplication.$inject = ['$routeProvider', '$locationProvider', '$httpProvider', 'authProvider', 'npSettings', 'jwtInterceptorProvider', 'LogglyLoggerProvider'];\n    function configApplication($routeProvider, $locationProvider, $httpProvider, authProvider, npSettings, jwtInterceptorProvider, LogglyLoggerProvider) {\n        authProvider.init({\n            clientID: npSettings.auth0_cliendId,\n            callbackURL: npSettings.callback,\n            domain: 'nextprot.auth0.com',\n            icon: 'img/np.png'\n        })\n\n\n        LogglyLoggerProvider.inputToken('8d9a8721-1beb-4e25-a37d-f0ff528cf611');\n\n        jwtInterceptorProvider.tokenGetter = ['ipCookie', function (ipCookie) {\n            // Return the saved token\n            return ipCookie('nxtoken');\n        }];\n        $httpProvider.interceptors.push('jwtInterceptor');\n\n        $httpProvider.interceptors.push('errorInterceptor');\n        $httpProvider.defaults.headers.common.Accept = 'application/json'\n\n\n        // List of routes of the application\n        $routeProvider\n            // Home page\n            .when('/', {title: 'welcome to nextprot', templateUrl: '/partials/welcome.html'})\n            // Pages (in nextprot-docs/pages): about, copyright...\n            .when('/:article', {title: 'page', templateUrl: '/partials/doc/page.html'})\n            //// Help pages\n            // Simple pages\n            .when('/help/:article', {title: 'help for nextprot', templateUrl: '/partials/doc/page.html'})\n            // RDF generalities\n            .when('/help/doc/:article', {title: 'help for RDF', templateUrl: '/partials/doc/doc.html'})\n            // RDF entities\n            .when('/help/entity/:entity', {title: 'help for RDF', templateUrl: '/partials/doc/help.html'})\n            // 404 error page\n            .when('/404', {title: '404', templateUrl: '/partials/errors/404.html'})\n            // Catch all\n            //.otherwise({redirectTo : '/404'});\n\n        // Without serve side support html5 must be disabled.\n        $locationProvider.html5Mode(true);\n        //$locationProvider.hashPrefix = '!';\n    };\n\n\n// define default behavior for all http request\n    errorInterceptor.$inject = ['$q', '$rootScope', '$log', '$location', 'flash']\n    function errorInterceptor($q, $rootScope, $log, $location, flash) {\n        return {\n            request: function (config) {\n                return config || $q.when(config);\n            },\n            requestError: function (request) {\n                return $q.reject(request);\n            },\n            response: function (response) {\n                return response || $q.when(response);\n            },\n            responseError: function (response) {\n                var status = response.status;\n                if (status == 0) {\n                    //CAREFUL DO NOT LOG EVERYTHING INTO LOGGYL BECAUSE 1) THERE ARE SENSITIVE INFORMATION token / bearer !  2) We have a limit of 200MB / day\n                    $log.error({status : response.status, message : \"connection problem\", href : window.location.href});\n                    //flash('alert-info', \"network issue: If the error persists please report to support@nextprot.org\");\n                    return;\n                }/*else if (status == 400) { //Should be handled by the controller}*/\n                else if ((status == 401) || (status == 403)) {\n                    $log.info({status : response.status, message : \"not authorized\", href : window.location.href});\n                    flash('alert-danger', \"You are not authorized to access the url. Please login or review your privileges. If you think this is a problem, please report to support@nextprot.org.\");\n                    $location.url(\"\");\n                    return;\n                }/*else if (status == 404) {\n                 flash('alert-danger', \"URL not found\");\n                 return;\n                 } */\n                else if (status >= 500) {\n                    console.log(response)\n                    if (response.message) {\n                        flash('alert-warning', response.message);\n                        $log.error({status : response.status, message : response.message, href : window.location.href});\n                    } else if (response.data.message) {\n                        flash('alert-danger', response.data.message);\n                        $log.error({status : response.status, message : response.data.message, href : window.location.href});\n                    } else\n                        $log.error({status : response.status, message : \"wtf??\", href : window.location.href});\n                        flash('alert-danger', 'Some error occured' + \" \" + status + \" \" + response.message + \" please report to support@nextprot.org\");\n                }\n                return $q.reject(response);\n            }\n        };\n    };\n\n})(angular);\n\n\n","(function (angular, undefined) {'use strict';\n\n//\n//Define the search module for controllers, services and models\nangular.module('np.search', [\n    'np.search.ui',\n    'np.search.service',\n    'np.cart',\n    'np.user.protein.lists',\n    'np.tracker'\n]).config(searchConfig)\n  .controller('SearchCtrl',SearchCtrl)\n  .controller('ResultCtrl',ResultCtrl);\n\n//\n//define routes for simple Search\nsearchConfig.$inject=['$routeProvider'];\nfunction searchConfig($routeProvider) {\n    // List of routes of the application\n    $routeProvider\n        .when('/search', {templateUrl: 'partials/search/result.html'})\n        .when('/search/:query', {templateUrl: 'partials/search/result.html'})\n        .when('/:entity/search', {templateUrl: 'partials/search/result.html'})\n        .when('/:entity/search/:query', {templateUrl: 'partials/search/result.html'});\n}\n\n//\n// implement main application controller\nSearchCtrl.$inject=['Tracker', '$scope','$rootScope','$location', '$routeParams','$document', 'Search','Cart','config','user','flash', 'userProteinList', 'queryRepository', 'exportService', '$log'];\nfunction SearchCtrl(Tracker, $scope, $rootScope, $location, $routeParams, $document, Search, Cart, config, user, flash, userProteinList, queryRepository, exportService, $log) {\n\n    // scope from template\n    $scope.Search = Search;\n    $scope.config = config;\n    $scope.user = user;\n    $scope.export = exportService;\n\n    $scope.editorOptions = {\n        lineWrapping : true,\n        lineNumbers: true,\n        autofocus:true,\n        readOnly: false,\n        mode: 'sparql'\n    };\n\n    function resetDocumentTitle() {\n\n        if($location.path()==='/') {\n            $document[0].title = \"neXtProt Search\";\n        }\n        else if($location.path()==='/user/protein/lists') {\n            $document[0].title = \"neXtProt - My lists\";\n        }\n        else if($location.path()==='/user/queries') {\n            $document[0].title = \"neXtProt - My queries\";\n        }\n    }\n\n    //\n    // update entity documentation on path change\n    $scope.$on('$routeChangeSuccess', function(event, next, current) {\n\n        exportService.reset();\n\n        if ($routeParams.queryId) {\n            queryRepository.getQueryByPublicId($routeParams.queryId).then(function (query) {\n                Search.params.sparql = \"#\" + query.title + \"\\n\";\n                Search.params.sparql += query.sparql;\n                exportService.userQuery = query;\n            });\n        } else if ($routeParams.listId) {\n            userProteinList.getListByPublicId($routeParams.listId).then(function (list) {\n                exportService.userList = list;\n            });\n\n        } else if ($routeParams.query){\n            exportService.searchQuery = $routeParams.query;\n            $scope.currentSearch = $routeParams.query;\n        }\n\n        resetDocumentTitle();\n\n        if($location.path()==='/') {\n            $scope.reset();\n            Search.clear();\n        }\n\n        Tracker.trackPageView();\n        Tracker.trackRouteChangeEvent();\n    });\n\n    //\n    // load profile on init\n    user.me();\n\n    // $scope.AdvancedQueryService = AdvancedQueryService;\n\n    $scope.navClass = function (page) {\n        var currentRoute = $location.path().substring(1) || 'home';\n        return page === currentRoute ? 'active' : '';\n    };\n\n    $scope.login = function() {\n        var currentUrl = $location.url();\n        $location.url(\"/\"); //need to go to context path since the callback is handled only in context path\n\n        user.login(function(err){\n          if(err){\n            flash('alert-error', \"Ooops an error occured with your login\");\n          }else {\n            flash('alert-info', \"Welcome \" + user.profile.name);\n            $location.url(currentUrl);\n          }\n        });\n\n    };\n\n    $scope.logout = function () {\n        $scope.reset();\n        user.logout();\n        $location.url(\"/\");\n        flash('alert-info', \"You have successfully logged out!\");\n    };\n\n    $scope.setAdvancedUserQuery = function (sparql) {\n        $scope.advancedUserQuery = sparql;\n    };\n\n    // interact with the search bar\n    $scope.manualPaginate = function (form) {\n\n        var currentValue = parseInt(Search.result.pagination.current);\n        var numPages = parseInt( Search.result.pagination.numPages);\n        if(currentValue > numPages){\n            Search.result.pagination.current=numPages;\n        }\n\n        $scope.params({start:(Search.result.pagination.current - 1)*Search.result.rows}, form);\n\n    };\n\n    // interact with the search bar\n    $scope.params = function (params, form) {\n        if (form && !form.$valid)\n            return;\n        angular.forEach(params, function (v, k) {\n            $location.search(k, v);\n        });\n    };\n\n    $scope.quality = function (name) {\n        Search.params.quality = name;\n        $location.search('quality', (name !== 'gold') ? 'gold-and-silver' : null);\n    };\n\n    $scope.entity = function (params) {\n\n        $location.search('start', null);\n        $location.search('filter', null);\n        $location.search('quality', null);\n        $location.search('sort', null);\n        $location.search('order', null);\n        if (Search.params.listId && params.entity != 'proteins') {\n            $location.search('listId', null);\n        }\n        $location.path('/' + params.entity + '/search' + ((Search.params.query) ? '/' + Search.params.query : ''));\n    };\n\n    $scope.updateUrlSearchPartAdvanced = function (mode) {\n        if(mode != $location.search(\"mode\")){\n\n            $location.search('query', null);\n            $location.search('sparql', null);\n            $scope.updateUrlSearchPart(mode);\n            if(mode.mode){\n                $location.path('/proteins/search')\n            }\n\n        }\n        // if (mode==='advanced'){\n        //     return $location.path('/proteins/search').search('mode', mode).search('query',null);\n        // }\n\n        // $location.search('mode', null).search('sparql',null)\n    };\n\n    $scope.clean = function () {\n        $location.search('engine', null);\n        $location.search('title', null);\n        $location.search('sparql', null);\n        $location.search('list', null);\n        $location.search('rows', null);\n        $location.search('start', null);\n        $location.search('query', null);\n        $location.search('queryId', null);\n        $location.search('filter', null);\n        $location.search('quality', null);\n        $location.search('sort', null);\n        $location.search('order', null);\n        $location.path('/' + Search.config.entityMapping[Search.params.entity] + '/search');\n\n        Search.params.sparql = \"\"; //This is needed only when the user is in this page proteins/search?mode=advanced and he has typed something and has clean (otherwise it is driven by the url)\n    };\n\n    $scope.reset=function(){\n        $location.search({})\n    };\n\n    $scope.updateUrlSearchPart = function (params) {\n\n        Cart.emptyCart();\n\n        $location.search('start', null);\n        angular.forEach(params, function (v, k) {\n            var t = ($location.search()[k] && $location.search()[k] === v) ? null : v;\n            $location.search(k, t)\n        });\n    };\n\n    $scope.goToUser = function (resourceType) {\n\n        Cart.emptyCart();\n\n        if(!user.isAnonymous()){\n            if(resourceType == \"lists\"){\n                $location.url(\"/user/protein/lists\");\n            }else  if(resourceType == \"queries\"){\n                $location.url(\"/user/queries\");\n            }\n\n            }else {\n            flash(\"alert-warning\", \"Please login to access your \" + resourceType + \".\")\n        }\n    };\n\n    $scope.active = function (value, key) {\n        if (key) {\n            return ($location.search()[key] === value) ? ' active  ' : '';\n        }\n        return ($location.path().indexOf(value) > -1) ? ' active  ' : '';\n    };\n\n    $scope.moredetails = function (index) {\n\n    };\n\n    $scope.displaySort=function(){\n        //\n        // map default visual aspect of sort\n        var entity=Search.config.entityMapping[Search.params.entity],\n            defaultSort=Search.config.widgets[entity].sort[Search.params.sort];\n\n        //\n        // sort order can be overrided by user action\n        if(Search.config.widgets.sort[Search.params.order]){\n            defaultSort.image=Search.config.widgets.sort[Search.params.order];\n            defaultSort.isAsc=(Search.params.order=='asc')\n        }\n        return defaultSort\n    };\n\n    $scope.isAdvancedMode = function () {\n        return Search.params.mode == 'advanced';\n    };\n\n    $scope.isSearchBarVisible=function(){\n        return ($location.path()==='/'||$location.path().indexOf('/search')!==-1)\n    };\n\n    $scope.go = function () {\n        var url = $location.url();\n        $location.search('filter', null);\n        $location.search('listId', null);\n        $location.search('list', null);\n        $location.search('rows', null);\n        $location.search('start', null);\n        $location.search('queryId', null);\n\n        // 1) Each time a new search is run, the basket (entries selected) should be emptied\n        // 2) Each time a list content is displayed, the basket (entries selected) should be emptied\n        Cart.emptyCart();\n\n        $location.path('/' + Search.config.entityMapping[Search.params.entity] + '/search');\n\n        //Advanced mode\n        if (Search.params.sparql && Search.params.sparql.length) {\n\n            $location.search('sparql', Search.params.sparql.trim()).\n                      search('mode','advanced').\n                      search('rows', (Search.params.rows) ? Search.params.rows : 50).\n                      search('query',null);\n\n        }\n\n        //We are in simple mode\n        if(Search.params.query && Search.params.query.length){\n            $location.search('query', Search.params.query.trim()).search('sparql',null);\n        }\n\n        //\n        // url has not changed => FIRE event\n        if ($location.url() === url) {\n            $scope.reload();\n        }\n    };\n\n    $scope.reload = function () {\n        // restart search with last params\n        Search.docs($routeParams, function (docs) {\n        });\n    };\n\n    $scope.$on('bs.autocomplete.update', function (event, arg) {\n        $scope.go();\n        $scope.$apply()\n    });\n\n    // use global scope to save the old location as referrer\n    $rootScope.$watch( function () {\n       return $location.url();\n    }, function( newPath, oldPath ) {\n       if( newPath !== oldPath ) {\n            $scope.referrer = oldPath;\n       } else {\n            $scope.referrer = undefined;\n       }\n    });\n\n    $rootScope.locateToReferrer=function() {\n        $location.url(($scope.referrer)?$scope.referrer:'/');\n    }\n}\n\n\n//\n// implement search result controller\nResultCtrl.$inject=['Tracker', '$scope','$modal', '$routeParams','Search','user','Cart','userProteinList','flash', 'exportService', 'queryRepository'];\nfunction ResultCtrl(Tracker, $scope, $modal, $routeParams, Search, user, Cart, userProteinList, flash, exportService, queryRepository) {\n    $scope.Search = Search;\n    $scope.Cart = Cart;\n    $scope.selectedResults = [];\n\n    $scope.showCart = true;\n\n    //\n    // save to cart modal\n    $scope.modal = { options: { edit: { title: 'Edit' }, create: { title: 'Create'} }, type:'create' };\n\n    var self=this;\n\n    this.search = function (params, cb) {\n        if ($routeParams.queryId) {\n            queryRepository.repository.show = false;\n        }\n\n        Search.docs(params, function (results) {\n\n            params.start = (!$routeParams.start) ? 0 : $routeParams.start;\n            if ($routeParams.listId) {\n                $scope.showCart = true;\n            } else {\n                _.each(results.docs, function (doc) {\n                    if (Cart.inCart(doc.id))\n                        $scope.selectedResults[doc.id] = true;\n                });\n            }\n\n            $scope.start = Search.result.offset >= Search.resultCount ? 0 : Search.result.offset;\n            $scope.rows = Search.result.rows;\n            if (cb) cb(results);\n        });\n    };\n\n    // private\n    var searchRouteParams = function() {\n\n        var params = _.clone($routeParams);\n\n        //Set the current owner id, if there is a list\n        if ($routeParams.listId) {\n            user.$promise.then(function () {\n\n                params.listOwner = user.profile.username;\n                self.search(params)\n            })\n        }\n        else {\n            self.search(params)\n        }\n    };\n\n    searchRouteParams();\n\n    $scope.change = function (docId) {\n        Cart.change(docId);\n    };\n\n    $scope.isInCart = function (docId) {\n        return Cart.isInCart(docId);\n    };\n\n    $scope.emptyCart = function () {\n        Cart.emptyCart();\n        if (!$routeParams.listId) $scope.selectedResults = [];\n    };\n\n    $scope.addAllToBasket = function () {\n\n        if ($routeParams.listId) {\n\n            userProteinList.getListByPublicId($routeParams.listId).then(\n                function (result) {\n\n                    Cart.setCart(result.accessionNumbers);\n                    selectAll(result.accessionNumbers);\n                },\n                function(error){\n                    flash(error);\n                }\n            );\n        } else {\n            Search.getIds(\n                {\n                    entity: 'entry.json',\n                    quality: Search.params.quality,\n                    mode: Search.params.mode,\n                    query: Search.params.query,\n                    sparql: Search.params.sparql,\n                    filter: Search.params.filter\n                }, function (docs) {\n                    Cart.setCart(docs.ids);\n                    selectAll(docs.ids);\n                    flash(\"alert-info\", docs.ids.length + \" entries added to clipboard\");\n                });\n        }\n    };\n\n    function selectAll(ids) {\n        $scope.selectedResults = [];\n        _.each(ids, function (id) {\n            $scope.selectedResults[id] = true;\n        });\n    }\n\n    $scope.setExportParameters = function (identifier) {\n        if (identifier) { //export an entry\n            exportService.setExportEntry(identifier);\n        } else {\n            exportService.setExportParameters($routeParams);\n        }\n    };\n\n    $scope.removeAllFromBasket = function () {\n\n        if ($routeParams.listId) {\n\n            userProteinList.getListByPublicId($routeParams.listId).then(\n                function (result) {\n\n                    Cart.removeFromCart(result.accessionNumbers);\n                    $scope.selectedResults = [];\n                },\n                function (error) {\n                    flash(error);\n                });\n        } else {\n            Search.getIds(\n                {\n                    entity: 'entry.json',\n                    quality: Search.params.quality,\n                    mode: Search.params.mode,\n                    query: Search.params.query,\n                    sparql: Search.params.sparql\n                }, function (docs) {\n                    var size = Cart.getCartSize();\n                    Cart.removeFromCart(docs.ids);\n                    $scope.selectedResults = [];\n                    flash(\"alert-info\", size + \" entries removed from clipboard\");\n                });\n        }\n    };\n\n    $scope.toggleAllToBasket = function () {\n\n        if (Cart.getCartSize() < Search.resultCount) {\n            $scope.addAllToBasket();\n        }else {\n            $scope.removeAllFromBasket();\n        }\n    };\n\n    $scope.inverseBasketSelection = function () {\n\n        alert(\"not yet implemented\");\n    };\n\n    $scope.getResultTemplateByEntity = function () {\n        switch (Search.params.entity) {\n            case \"publication.json\":\n                return 'partials/search/result-publications.html';\n            case \"term.json\":\n                return 'partials/search/result-terms.html';\n            default:\n                return 'partials/search/result-proteins.html';\n        }\n    };\n\n    $scope.getSortTemplateByEntity = function () {\n        switch (Search.params.entity) {\n            case \"publication.json\":\n                return 'partials/search/sort-publications.html';\n            case \"term.json\":\n                return 'partials/search/sort-terms.html';\n            default:\n                return 'partials/search/sort-proteins.html';\n        }\n    };\n\n    $scope.affix = function (selector) {\n        $(selector).affix()\n    };\n\n    $scope.launchModalList = function (elem, action) {\n        if(!user.isAnonymous()){\n\n            $scope.selected = {};\n            angular.extend($scope.modal, { type: action});\n\n            var proteinListModal = $modal({scope: $scope.$new(), template: 'partials/user/user-protein-lists-modal.html', show: true});\n            //proteinListModal.$promise.then(proteinListModal.show);\n        } else {\n            flash('alert-warning', 'Please login to save a list');\n        }\n    };\n\n    $scope.saveModal = function () {\n\n        var proteinList = {\n            name: $scope.selected.name,\n            description: $scope.selected.description,\n            accessions: Cart.getElements(),\n            ownerId: 1\n        };\n\n        userProteinList.create(user, proteinList).$promise.then(\n            function () {\n                flash('alert-success', \"List \" + proteinList.name + \" successfully created.\");\n\n                Tracker.trackSaveAsListEvent(Cart.getElements().length, true);\n            }, function(error)  {\n                flash('alert-warning', error.data.message);\n                Tracker.trackSaveAsListEvent(Cart.getElements().length, false);\n            }\n        );\n    }\n}})(angular);\n","(function (angular, undefined) {'use strict';\nvar SearchService = angular.module('np.search.service', ['np.search.ui']);\n\n\n// Search API\n\n/**\n * define service that made the search\n */\nSearchService.factory('Search', [\n    '$resource',\n    '$http',\n    '$cookies',\n    '$cookieStore',\n    'config',\n    'flash', //TODO flash should not be here, it should be placed on the controller, but before, the search need to be promised\n    function ($resource, $http, $cookies, $cookieStore, config, flash) {\n        //\n        // this is the url root\n        var $api = $resource(config.api.API_URL + '/:action/:entity', { action: '@action', entity: '@entity', port: config.api.API_PORT }, {\n            search: { method: 'POST'}\n        });\n\n\n        var defaultUrl = {\n            filter: '',\n            entity: 'entry.json',\n            quality: 'gold',\n            query: '',\n            sparql: null,\n            sort: '',\n            order: '',\n            mode: null // can be simple or advanced\n        };\n\n        var defaultAdv = {\n            sparqlEngine: 'Jena'\n        };\n\n        var searchApi = {\n            action: 'search'\n        };\n\n        var suggestApi = {\n            action: 'autocomplete'\n        };\n\n\n        /**\n         * Reformat publication fields in doc\n         *\n         * @param {Object} doc publications to reformat\n         */\n        function reformatPublication(doc) {\n\n            splitPubAcsPubMedLast(doc);\n\n            doc.year = new Date(doc.date.replace(/(CET|CEST|EEST|WEEST)/gi, \"\")).getFullYear();\n            doc.authors = doc.pretty_authors.split(' | ');\n        }\n\n        /**\n         * Format publication sources accessions line in doc object\n         *\n         * @method formatPubSources\n         * @param {Object} doc the doc on which format has to be done\n         */\n        function splitPubAcsPubMedLast(doc) {\n\n            if (doc.ac != undefined) {\n\n                // pubmed last in \"ac\":\"25174335:PubMed | 10.1016/j.jmb.2014.08.014:DOI\"\n                doc.acs = doc.ac.split(' | ');\n\n                if (doc.acs.length > 1) {\n                    var i = 0;\n                    while (i < doc.acs.length) {\n                        if (doc.acs[i].match(\"PubMed\")) break;\n                        i++;\n                    }\n\n                    if (i < doc.acs.length) {\n                        var pubmed = doc.acs[i];\n                        doc.acs[0] = doc.acs[doc.acs.length - 1];\n                        doc.acs[doc.acs.length - 1] = pubmed;\n                    }\n                }\n            } else {\n                doc.acs = \"\";\n            }\n        }\n\n        /**\n         * Sort filters in ascending order of their mapped values\n         *\n         * @method sortFiltersByKey\n         * @param {Object} parameters\n         *   + {Array} filters array to sort\n         *   + {Object} map a dictionary of key/values\n         *   + {String='name'} key name to access value from filters element object ('name' by default)\n         * @return {Array} Returns a sorted list of filters\n         */\n        function sortFiltersByKey(parameters) {\n\n            var filters = parameters.filters;\n            var map = parameters.map;\n            var key = parameters.key;\n\n            key = typeof key !== 'undefined' ? key : 'name';\n\n            return filters.sort(function(f1, f2) {\n\n                if (! (key in f1) ) console.error(\"alert-warning\", \"'\"+key+\"' was not found in \"+JSON.stringify(f1, null, 4));\n                else if (! (key in f2) ) console.error(\"alert-warning\", \"'\"+key+\"' was not found in \"+JSON.stringify(f2, null, 4));\n                else return map[f1[key]].localeCompare(map[f2[key]]);\n            });\n        }\n\n        var Search = function (data) {\n            //\n            // init session\n            this.session = {summary : false};\n            //angular.extend(this.session, $cookies)\n\n            //\n            // default config\n            this.config = config.api;\n\n            //\n            // app search service params\n            this.params = {};\n\n            //for activating the spinner\n            this.loading = false;\n\n            //\n            // result content\n            this.result = {};\n\n            this.resultCount = 0;\n\n            angular.extend(this.params, defaultUrl, data || {})\n\n        };\n\n        Search.prototype.displayGold = function () {\n            return (this.config.widgets[this.result.display] && this.config.widgets[this.result.display].gold && this.params.mode != \"advanced\");\n        };\n\n\n        /*Search.prototype.cookies = function (session) {\n            angular.extend(this.session, session, $cookies)\n            Object.keys(session).forEach(function (k) {\n                if (session[k] !== undefined)$cookieStore.put(k, session[k])\n            })\n            return true;\n        }*/\n\n        Search.prototype.clear = function () {\n            angular.copy(defaultUrl, this.params)\n        };\n\n        Search.prototype.isSearchButtonDisabled = function () {\n            if (this.params.mode == 'advanced' && (!this.params.sparql || !this.params.sparql.length))\n                return true;\n            return ((this.params.query) && (this.params.query.length == 0));\n        };\n\n\n        Search.prototype.paginate = function (params, docs) {\n            this.resultCount = docs.found;\n            this.result.pagination = {};\n            if (!params.rows)\n                params.rows = config.api.paginate.defaultRows;\n\n            params.rows = parseInt(params.rows);\n\n            // current page in the bottom\n            var currentOffset = parseInt((params.start ? params.start : 0) / params.rows);\n            //The page starts at 1 and the offset starts at 0\n            this.result.pagination.current = (currentOffset + 1);\n\n            //total number of pages\n            var totalPage = Math.floor(this.resultCount / params.rows) + 1;\n\n            this.result.pagination.numPages = parseInt(this.calcPages(this.resultCount, params.rows ? parseInt(params.rows) : 50));\n            //console.log('pages: ', this.result.num, params.rows ? params.rows : 50, this.result.pagination.numPages, this.calcPages(this.result.num, params.rows ? params.rows : 50));\n\n            // back button\n            if (params.start > 0 && (this.result.pagination.current) > 0) {\n                this.result.pagination.prev = {\n                    offset: currentOffset - 1,\n                    rows: params.rows,\n                    start: ((currentOffset - 1) * params.rows),\n                    visible : (currentOffset != 0)\n\n                };\n            }\n\n            // next button\n            if (docs.results.length == params.rows) {\n                this.result.pagination.next = {\n                    offset: currentOffset + 1,\n                    rows: params.rows,\n                    start: ((currentOffset + 1) * params.rows),\n                    visible : (currentOffset != (totalPage - 1))\n                };\n            }\n\n            this.result.offset = docs.start;\n            this.result.pages = [];\n\n\n            var minPage = this.result.pagination.current - (config.api.paginate.steps / 2);\n            var maxPage = this.result.pagination.current + (config.api.paginate.steps / 2);\n\n\n            if (minPage < 1){\n                maxPage  += (Math.abs(minPage) + 1);\n                minPage = 1;\n            }\n\n            if (maxPage > totalPage){\n                minPage -= Math.abs(totalPage - maxPage);\n                maxPage = totalPage;\n            }\n\n            //Final checks when the num results don't feel the paging\n            if(minPage < 1) {\n                minPage = 1;\n            }\n\n            if(maxPage > totalPage) {\n                maxPage = totalPage;\n            }\n\n\n            for (var page = minPage; page <= maxPage; page++) {\n                this.result.pages.push({\n                    offset: page,\n                    current: (this.result.pagination.current) === page\n                })\n            }\n\n        };\n\n\n        Search.prototype.calcPages = function (numDocs, pageSize) {\n            return ( numDocs + pageSize - 1) / pageSize;\n        };\n\n\n        //\n        //\n        // suggest is a quick search\n        Search.prototype.suggest = function (query, cb) {\n            var params = {};\n            angular.extend(params, defaultUrl, suggestApi, {query: query, entity: this.params.entity, quality: this.params.quality});\n\n            $api.search(params, params.query, function (result) {\n                var items = [];\n                for (var i = 0; i < result.autocomplete.length; i = i + 2) {\n                    items.push(result.autocomplete[i].name)\n                }\n                if (cb)cb(items)\n            })\n        };\n\n\n        //\n        //\n        // solr search in all documents\n        Search.prototype.docs = function (params, cb) {\n\n            var me = this;\n            me.result.error = \"\";\n            me.result.docs = [];\n            me.loading = true;\n\n            delete this.params.listId;\n            delete this.params.queryId;\n            delete this.params.list;\n            delete this.params.accs;\n\n            angular.extend(this.params, searchApi, defaultUrl, params);\n            this.params.entity = config.api.entityMapping[params.entity];\n\n            // adv search\n            if (this.params.sparql) {\n                angular.extend(this.params, defaultAdv);\n            }\n\n            // make a copy to avoid post issue\n            var post = angular.copy(this.params);\n            delete post.action;\n            delete post.entity;\n\n            // display search status status\n            me.result.message = \"Loading content...\";\n\n            $api.search({action: this.params.action, entity: this.params.entity}, post).$promise.then(function (docs) {\n                me.result.rows = docs.rows;\n                me.result.params = params;\n                me.result.display = config.api.entityMapping[me.params.entity];\n                me.result.core = docs.index;\n                me.result.time = docs.elapsedTime;\n                me.result.score = docs.maxScore;\n                me.result.docs = docs.results;\n                me.result.ontology = config.api.ontology;\n                me.result.filters = sortFiltersByKey({filters: docs.filters, map: me.result.ontology});\n\n                me.result.message = (docs.found == 0) ? \"No search results were found.\" : null;\n\n                //\n                // prepare spellcheck stucture\n                me.result.spellcheck = docs.spellcheck;\n\n                //\n                // prepare pagination\n                me.paginate(params, docs);\n\n                if (me.result.display === \"publications\")\n                    me.result.docs.forEach(reformatPublication);\n\n                me.loading = false;\n\n                if (cb)cb(me.result)\n            }, function (error) {\n                flash(\"alert-warning\", error.data.message); //TODO remove this!!!\n\n                //See if there is a cleaner way of doing this\n                me.loading = false;\n                me.result.message = null;\n                me.result.pages = [];\n                me.result.filters = null;\n                me.resultCount = 0;\n                //if (error.status)\n                //me.result.error = \"Ooops, request failed: \" + error;\n            })\n        };\n\n        Search.prototype.getIds = function (params, cb) {\n\n            // make a copy to avoid post issue\n            var post = angular.copy(params);\n            delete post.action;\n            delete post.entity;\n\n            // adv search\n            if (params.mode == 'advanced')\n                angular.extend(post, defaultAdv);\n\n            $api.search({ action: 'search-ids', entity: params.entity, quality: params.quality, filter: params.filters }, post).$promise.then(function (docs) {\n                if (cb)cb(docs);\n            });\n        };\n\n\n        var search = new Search();\n        return search;\n    }]);\n})(angular);\n","(function (angular, undefined) {\n    'use strict';\n\n\n    var SearchUI = angular.module('np.search.ui', []);\n\n\n    SearchUI.filter('has', function () {\n        return function (input, filter) {\n            if (!input || !filter || !input.length || !filter.length)\n                return false;\n            return input.indexOf(filter) > -1;\n        }\n    });\n\n    SearchUI.filter('showDropdown', function () {\n        return function (input) {\n            if (input == 'no')\n                return 'hidden';\n            return 'dropdown';\n        }\n    });\n\n    SearchUI.filter('trim', function () {\n        return function (input) {\n            if (!input || !input.length)\n                return '';\n            return (input.trim());\n        }\n    });\n\n\n    SearchUI.filter('getGitHubUrl', ['config', function (config) {\n\n        return function (queryId) {\n\n            var s = \"000000000\" + queryId;\n            var fileName = \"NXQ_\" + s.substr(s.length - 5) + \".rq\";\n            return config.api.githubQueriesEdit + fileName;\n        };\n\n    }]);\n\n    /**\n     * Filters for publications\n     */\n\n    SearchUI.filter('getPubUrl', [function () {\n        return function (ac) {\n            if (ac.indexOf(\":PubMed\") != -1) {\n                //return \"http://www.ncbi.nlm.nih.gov/pubmed?term=\" + ac.substring(ac, ac.indexOf(\":\"));\n                return \"http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=pubmed&cmd=search&term=\" + ac.substring(ac, ac.indexOf(\":\"));\n            } else if (ac.indexOf(\":DOI\") != -1) {\n                return \"http://dx.doi.org/\" + ac.substring(ac, ac.indexOf(\":\"));\n            }\n        }\n    }]);\n\n    SearchUI.filter('getPubSource', [function () {\n        return function (ac) {\n            if (ac.toLowerCase().indexOf(\"pubmed\") != -1) return \"PubMed\";\n            else return \"Full text\";\n        };\n    }]);\n\n    SearchUI.filter('getPubId', [function () {\n        return function (ac) {\n            return ac.substring(0, ac.indexOf(\":\"));\n        };\n    }]);\n\n\n    SearchUI.filter('getNeXtProtUrl', ['config', function (config) {\n        return function (input) {\n\n                if(config.api.environment === \"pro\"){\n                 switch(input) {\n                        case \"api\": return \"https://api.nextprot.org\" ;\n                        case \"search\": return \"https://search.nextprot.org\" ;\n                        case \"snorql\": return \"http://snorql.nextprot.org\" ;\n                    }\n                }\n\n                if(input == \"api\") return config.api.API_URL;\n                else return \"http://\"+ config.api.environment + \"-\" + input + \".nextprot.org\";\n        };\n    }]);\n\n    SearchUI.filter('filterMyQueries', ['user', function (user) {\n        return function (items) {\n            var filtered = [];\n            angular.forEach(items, function (item) {\n                if (item.owner === user.username) {\n                    filtered.push(item);\n                }\n            });\n            return filtered;\n        };\n    }]);\n\n    SearchUI.filter('containsTag', ['user',function (user) {\n        return function(items, selectedTag) {\n            var filtered = [];\n            if(selectedTag == null)\n                return items;\n\n            if(selectedTag === 'My queries'){\n                angular.forEach(items, function(item) {\n                    if(item.owner === user.username) {\n                        filtered.push(item);\n                    }\n                });\n            }else {\n                angular.forEach(items, function(item) {\n                    if(_.intersection([selectedTag], item.tags).length > 0) {\n                        filtered.push(item);\n                    }\n                });\n\n            }\n\n            return filtered;\n        };\n    }]);\n\n    SearchUI.filter('encodeURIComponent', function() {\n        return window.encodeURIComponent;\n    });\n\n    /*SearchUI.filter('limit', function () {\n        return function (value, max, wordwise, tail) {\n            if (!value) return '';\n            if (!wordwise) wordwise = true;\n\n            max = parseInt(max, 10);\n            if (!max) return value;\n            if (value.length <= max) return value;\n\n            value = value.substr(0, max);\n            if (wordwise) {\n                var lastspace = value.lastIndexOf(' ');\n                if (lastspace != -1) {\n                    value = value.substr(0, lastspace);\n                }\n            }\n\n            return value + (tail || ' ...');\n        };\n    });*/\n\n    SearchUI.filter('prefix', function () {\n        return function (value, max, wordwise) {\n            if (!value) return '';\n            if (!wordwise) wordwise = true;\n\n            max = parseInt(max, 10);\n            if (!max) return value;\n            if (value.length <= max) return value;\n\n            value = value.substr(0, max);\n            if (wordwise) {\n                var lastspace = value.lastIndexOf(' ');\n                if (lastspace != -1) {\n                    value = value.substr(0, lastspace);\n                }\n            }\n\n            return value;\n        };\n    });\n\n    SearchUI.filter('suffix', function () {\n        return function (value, max) {\n            if (!value) return '';\n\n            max = parseInt(max, 10);\n            if (!max) return value;\n            if (value.length <= max) return '';\n\n            var head = value.substr(0, max);\n            var lastHeadSpace = head.lastIndexOf(' ');\n            var tail;\n\n            if (lastHeadSpace != -1) {\n                tail = value.substr(lastHeadSpace+1);\n            }\n\n            return tail;\n        };\n    });\n\n    SearchUI.directive('version', ['config', function (config) {\n        return function (scope, elm, attrs) {\n            elm.text(config.version);\n        };\n    }]);\n\n    SearchUI.directive('npToggleAbstract', [function () {\n        return function (scope, elm, attrs) {\n            elm.click(function () {\n\n                if (elm.context.text.match(/Show Abstract/)) {\n                    elm.context.text = \"Hide Abstract\";\n                } else if (elm.context.text.match(/Hide Abstract/)) {\n                    elm.context.text = \"Show Abstract\";\n                }\n                angular.element(attrs.npToggleAbstract).toggleClass(\"hide\")\n            })\n        };\n    }]);\n\n    SearchUI.directive('npToggleMore', [function () {\n        return function (scope, elm, attrs) {\n            elm.click(function () {\n\n                if (elm.context.text.match(/more/)) {\n                    elm.context.text = \"[less]\";\n                } else if (elm.context.text.match(/less/)) {\n                    elm.context.text = \"[more]\";\n                }\n                angular.element(attrs.npToggleMore).toggleClass(\"hide\")\n            })\n        };\n    }]);\n\n    SearchUI.directive('npAnimate', ['config', 'Search', '$location', function (config, Search, $location) {\n        return function (scope, elm, attrs) {\n            var target = attrs.npAnimate;\n            scope.$watch(function () {\n                return $location.path()\n            }, function (newValue, oldValue) {\n                if (newValue !== \"/\" && newValue !== \"/home\") {\n                    elm.addClass(\"animate\");\n                } else {\n                    elm.removeClass(\"animate\");\n                }\n\n            });\n        };\n    }]);\n\n\n    SearchUI.directive('modalOnLoad', function () {\n        return function (scope, element, attrs) {\n            element.modal({backdrop: false});\n        };\n    });\n\n    SearchUI.directive('npEnter', function () {\n        return function (scope, element, attrs) {\n            element.bind(\"keydown keypress\", function (event) {\n                if (event.which === 13) {\n                    scope.$apply(function () {\n                        scope.$eval(attrs.npEnter);\n                    });\n\n                    event.preventDefault();\n                }\n            });\n        };\n    });\n\n//\n// autocomplete with customized bootstrap typeahead\n// https://github.com/twbs/bootstrap/blob/v2.3.2/js/bootstrap-typeahead.js\n    SearchUI.directive('bsAutocomplete', ['Search', '$timeout', function (Search, $timeout) {\n        var items = [];\n\n        return function (scope, element, attrs) {\n            var promise;\n\n            element.typeahead({\n                //minLength: 2,\n                autoSelect: false,\n                source: function (query, process) {\n\n                    // cancel previous promise if defined\n                    if (promise != undefined)\n                        $timeout.cancel(promise);\n\n                    // make a promise to look up suggestions after a time delay\n                    if (this.$element.val().length>=2) {\n                        promise = $timeout(function () {\n                            Search.suggest(query, function (items) {\n                                return process(items)\n                            })\n                        }, 500);\n                    }\n                },\n                matcher: function (item) {\n                    return true;\n                },\n                updater: function (item) {\n                    Search.params.query = this.$element.val().replace(/[^ ]*$/, '') + item + ' '\n                    scope.$emit('bs.autocomplete.update', {element: Search.params.query});\n                    return Search.params.query;\n                },\n                highlighter: function (item) {\n                    if (this.query.length > 0) {\n                        // this.query: insulin rec\n                        // items: receptor, recurrent, receptors, recruitment, receptormediated\n                        var words = this.query.split(' ');\n                        var endItem= item.slice(words[words.length - 1].length);\n                        return \"<span class='gray'>\" + this.query + \"</span><strong class='gray2'>\" + endItem + \"</strong>\"\n                    }\n                    return this.query;\n                }\n            });\n            // Bootstrap override\n            var typeahead = element.data('typeahead');\n            // Fixes #2043: allows minLength of zero to enable show all for typeahead\n            typeahead.lookup = function (ev) {\n\n                var items;\n                this.query = this.$element.val() || '';\n\n                if (this.query.length < this.options.minLength) {\n                    return this.shown ? this.hide() : this;\n                }\n                items = this.source(this.query, $.proxy(this.process, this));\n\n                return items ? this.process(items) : this;\n            };\n        };\n    }]);\n\n    SearchUI.directive('jqAutocomplete', ['Search', function (Search) {\n        var results = [];\n        return function (scope, elm, attrs) {\n            elm.autocomplete({\n                select: function (event, ui) {\n                    var words = Search.params.query.split(/[\\s,]+/);\n                    words[words.length - 1] = ui.item.value;\n                    Search.params.query = ui.item.value = words.join(' ');\n                },\n                minLength: 2,\n                source: function (request, response) {\n                    Search.solrSuggest(request.term, function (docs, solrParams) {\n                        var facets = docs.facet_counts.facet_fields.text;\n                        results = [];\n                        for (var i = 0; i < facets.length; i = i + 2) {\n                            results.push({\"label\": facets[i], \"count\": facets[i + 1], \"value\": facets[i]});\n                        }\n                        //console.log('solr',results,solrParams.q,solrParams )\n                        return response(results)\n                    });\n                }\n            })\n        };\n    }]);\n\n\n    SearchUI.directive('slideOnClick', ['$parse', '$timeout', function ($parse, $timeout) {\n        return function (scope, element, attr) {\n            $timeout(function () {\n                var e = angular.element(attr['slideOnClick']);\n                if (e.length) {\n                    element.toggle(function () {\n                            e.slideDown();\n                        },\n                        function () {\n                            e.slideUp();\n                        })\n                }\n            }, 100);\n        }\n    }]);\n\n    SearchUI.directive('npAffix', ['$parse', '$timeout', function ($parse, $timeout) {\n        return function (scope, element, attr) {\n            $timeout(function () {\n                element.affix({offset: attr['npAffix']});\n            }, 0);\n        }\n    }]);\n\n    SearchUI.directive('indeterminateCheckbox', ['Search', function (Search) {\n                return {\n                    scope: true,\n                    restrict: 'A',\n                    link: function (scope, element, attrs) {\n\n                        // Watch found proteins for changes\n                        scope.$watch(attrs.foundProteinList, function (foundProteinList) {\n                            var hasChecked = false;\n                            var isIndeterminate = false;\n                            var foundProteinCount = Search.resultCount;\n\n                            // some proteins are selected\n                            if (foundProteinList.length > 0) {\n                                // some proteins are selected\n                                hasChecked = true;\n\n                                // not all proteins are selected -> indeterminate state\n                                if (foundProteinList.length < foundProteinCount)\n                                    isIndeterminate = true;\n                            }\n\n                            /*console.log(\"found proteins changed:\", foundProteinList);\n                            console.log(\"found count:\", foundProteinCount);\n                            console.log(\"has checked:\", hasChecked, \"is indeterminate:\", isIndeterminate);*/\n\n                            // Determine which state to put the checkbox in\n                            if (hasChecked && isIndeterminate) {\n                                element.prop('checked', false);\n                                element.prop('indeterminate', true);\n                            } else {\n                                element.prop('checked', hasChecked);\n                                element.prop('indeterminate', false);\n                            }\n                        }, true);\n                    }\n        }\n    }]);\n\n})(angular);\n\n\n","(function (angular, undefined) {\n    'use strict';\n\n    angular.module('np.viewer', [])\n        .config(viewerConfig)\n        .factory('viewerService', viewerService)\n        .controller('ViewerCtrl', ViewerCtrl)\n        .service('viewerURLResolver', viewerURLResolver)\n    ;\n\n    viewerConfig.$inject = ['$routeProvider'];\n    function viewerConfig($routeProvider) {\n\n        var ev = {templateUrl: '/partials/viewer/entry-viewer.html'};\n        var gv = {templateUrl: '/partials/viewer/global-viewer.html'};\n\n        $routeProvider\n            .when('/db/term/:db', {templateUrl: '/partials/viewer/viewer-entry-np1.html'})\n            .when('/db/entry/:db', {templateUrl: '/partials/viewer/viewer-entry-np1.html'})\n            .when('/db/entry/:element/:db', {templateUrl: '/partials/viewer/viewer-entry-np1.html'})\n            .when('/db/publication/:db', {templateUrl: '/partials/viewer/viewer-entry-np1.html'})\n\n\n            //GLOBAL VIEWS https://github.com/calipho-sib/nextprot-viewers\n            .when('/view', gv)\n            .when('/view/gist/:gistusr/:gistid', gv) // related to gists\n            .when('/view/git/:repository/:user/:branch/:gh1', ev)\n            .when('/view/git/:repository/:user/:branch/:gh1/:gh2', ev)\n            .when('/view/git/:repository/:user/:branch/:gh1/:gh2/:gh3', ev)\n\n            .when('/view/:gv1', gv)\n            .when('/view/:gv1/:gv2', gv)\n            .when('/view/:gv1/:gv2/:gv3', gv)\n\n            //ENTRY VIEWS\n            .when('/entry/:entry/', ev)\n            .when('/entry/:entry/:element', ev)\n            .when('/entry/:entry/view/:ev1', ev)\n            .when('/entry/:entry/view/:ev1/:ev2', ev)\n\n            .when('/entry/:entry/gist/:gistusr/:gistid', ev) // related to gists\n            .when('/entry/:entry/git/:repository/:user/:branch/:gh1', ev)\n            .when('/entry/:entry/git/:repository/:user/:branch/:gh1/:gh2', ev)\n            .when('/entry/:entry/git/:repository/:user/:branch/:gh1/:gh2/:gh3', ev)\n            .when('/term/:termid/', {templateUrl: '/partials/viewer/viewer-term-np1.html'})\n\n    }\n\n\n    ViewerCtrl.$inject = ['$scope', '$sce', '$routeParams', '$location', 'config', 'exportService', 'viewerService', 'viewerURLResolver'];\n    function ViewerCtrl($scope, $sce, $routeParams, $location, config, exportService,  viewerService, viewerURLResolver) {\n\n        $scope.externalURL = null;\n        $scope.widgetEntry = null;\n        $scope.githubURL = null;\n        $scope.communityMode = false;\n        $scope.simpleSearchText = \"\";\n\n        $scope.entryProps ={};\n        $scope.entryName = $routeParams.entry;\n\n        var entryViewMode = $scope.entryName != undefined;\n\n        if(entryViewMode){\n\n            viewerService.getCommunityEntryViewers().success(function(data){\n                $scope.communityViewers = data;\n            });\n\n            viewerService.getEntryProperties($routeParams.entry).$promise.then(function (data) {\n\n                $scope.entryProps.name = data.entry.overview.mainProteinName;\n                $scope.entryProps.genesCount = data.entry.overview.geneNames.length;\n                angular.extend($scope.entryProps, data.entry.properties);\n\n            })\n\n        }else {\n\n            viewerService.getCommunityGlobalViewers().success(function(data){\n                $scope.communityViewers = data;\n            });\n        }\n\n        $scope.setExportEntry = function (identifier) {\n            exportService.setExportEntry(identifier);\n        };\n\n        $scope.makeSimpleSearch = function () {\n            $location.search(\"query\", $scope.simpleSearchText);\n            $location.path(\"proteins/search\");\n        }\n\n        $scope.activePage = function (page) {\n\n           if(angular.equals({'entry': $routeParams.entry},  $routeParams)){ // Page function\n               if(page === 'function') {\n                   return 'active';\n               }\n           }\n\n            if ($routeParams.element == page)  return 'active'\n            if (\"view/\" + $routeParams.ev1 == page)  return 'active';\n            if ((\"gist/\" + $routeParams.gistusr + \"/\" + $routeParams.gistid) == page)  return 'active';\n\n            else return '';\n        }\n\n        // update entity documentation on path change\n        $scope.$on('$routeChangeSuccess', function (event, next, current) {\n            $scope.widgetEntry = $routeParams.entry;\n\n            //redirect for compatibility with old neXtProt\n            if ($routeParams.db) {\n                $location.path($location.$$path.replace(\"db/\", \"\"));\n            }\n\n            if ($routeParams.ev1) { //Entry view\n                angular.extend($scope, viewerURLResolver.getScopeParamsForEntryViewers($routeParams.ev1, $routeParams.ev2, $routeParams.entry));\n            }else if ($routeParams.gv1) { //Global view\n                angular.extend($scope, viewerURLResolver.getScopeParamsForGlobalViewers($routeParams.gv1, $routeParams.gv2, $routeParams.gv3));\n            // COMMUNITY VIEWERS etiher with GitHub or Gist //////////////////////////////////////\n            } else if ($routeParams.repository) {\n                angular.extend($scope, viewerURLResolver.getScopeParamsForGitHubCommunity($routeParams.gh1, $routeParams.gh2, $routeParams.gh3, $routeParams.repository, $routeParams.user, $routeParams.branch, $routeParams.entry));\n            } else if ($routeParams.gistusr && $routeParams.gistid) { //Gist\n                angular.extend($scope, viewerURLResolver.getScopeParamsForGistCommunity($routeParams.gistusr, $routeParams.gistid, $routeParams.entryName));\n\n            // GRAILS INTEGRATION\n            } else { //deprecated nextprot\n                angular.extend($scope, viewerURLResolver.getScopeParamsForNeXtProtGrails($location.$$path));\n            }\n        });\n\n\n    }\n\n\n    viewerService.$inject = ['$resource', '$http', 'config'];\n    function viewerService($resource, $http, config) {\n\n        var rawGitUrlBase = 'https://cdn.rawgit.com/calipho-sib/nextprot-viewers/master/community/';\n\n        //skips authorization\n        var entryViewersResource = $http({url: rawGitUrlBase + 'community-entry-viewers.json', skipAuthorization : true, method: 'GET'});\n        var globalViewersResource = $http({url: rawGitUrlBase + 'community-global-viewers.json', skipAuthorization : true, method: 'GET'});\n\n        var entryProperties = $resource(config.api.API_URL + '/entry/:entryName/overview.json', {entryName: '@entryName'}, {get : {method: \"GET\"}});\n\n\n        var ViewerService = function () {\n\n        };\n\n        ViewerService.prototype.getCommunityGlobalViewers = function () {\n            return globalViewersResource;\n        }\n\n        ViewerService.prototype.getCommunityEntryViewers = function () {\n            return entryViewersResource;\n        }\n\n        ViewerService.prototype.getEntryProperties = function (entryName) {\n            return entryProperties.get({entryName:entryName});\n        }\n\n        return new ViewerService();\n    }\n\n\n    viewerURLResolver.$inject = ['$sce', '$location', 'config', 'npSettings'];\n    function viewerURLResolver($sce, $location, config, npSettings) {\n\n\n        //Setting correct api for viewer\n        var env = npSettings.environment;\n        if(env.indexOf(\"NX_\") !== -1){ // Choose the environemnt for the viewers\n            env = 'dev';\n            //env = 'localhost';\n        }\n\n        function concatEnvToUrl (url) {\n            var envUrl = \"\";\n            if(env !== 'pro'){\n                if(url.indexOf('?') !== -1){\n                    envUrl = (\"&env=\" + env);\n                }else {\n                    envUrl = (\"?env=\" + env);\n                }\n            }\n            return url + envUrl;\n        }\n\n        this.getScopeParamsForEntryViewers = function (ev1, ev2, entryName) {\n\n            var url = window.location.protocol + \"//rawgit.com/calipho-sib/nextprot-viewers/master/\" + ev1;\n            if(ev2) url += \"/\" + ev2;\n            url += \"/app/index.html\" ;\n\n            return {\n                \"communityMode\": false,\n                \"githubURL\": url.replace(\"rawgit.com\", \"github.com\").replace(\"/master/\", \"/blob/master/\"),\n                \"externalURL\":  $sce.trustAsResourceUrl(concatEnvToUrl(url + \"?nxentry=\" + entryName + \"&inputOption=true\")) ,\n                \"widgetURL\": $sce.trustAsResourceUrl(concatEnvToUrl(url + \"?nxentry=\" + entryName))\n            }\n\n        }\n\n        this.getScopeParamsForGlobalViewers = function (gv1, gv2, gv3) {\n\n            var url = window.location.protocol + \"//rawgit.com/calipho-sib/nextprot-viewers/master/\" + gv1;\n            if (gv2) url += \"/\" + gv2;\n            if (gv3) url += \"/\" + gv3;\n            url += \"/app/index.html\";\n\n            return {\n                \"communityMode\": false,\n                \"githubURL\": url.replace(\"rawgit.com\", \"github.com\").replace(\"/master/\", \"/blob/master/\"),\n                \"externalURL\": $sce.trustAsResourceUrl(concatEnvToUrl(url)),\n                \"widgetURL\": $sce.trustAsResourceUrl(concatEnvToUrl(url))\n            }\n\n        }\n\n\n        this.getScopeParamsForGitHubCommunity = function (gh1, gh2, gh3, repository, user, branch, entryName) {\n\n            var url = window.location.protocol + \"//rawgit.com/\" + repository + \"/\" + user + \"/\" + branch + \"/\" + gh1;\n            if (gh2) { url += \"/\" + gh2; }\n            if (gh3) { url += \"/\" + gh3; }\n\n            var urlSource = url.replace(\"rawgit.com\", \"github.com\").replace(\"/\" + branch + \"/\", \"/blob/\" + branch + \"/\");\n            if(entryName != undefined) url += \"?nxentry=\" + entryName;\n\n            return {\n                \"communityMode\": true,\n                \"githubURL\": urlSource,\n                \"externalURL\": $sce.trustAsResourceUrl(concatEnvToUrl(url)),\n                \"widgetURL\": $sce.trustAsResourceUrl(concatEnvToUrl(url))\n            }\n        }\n\n        this.getScopeParamsForGistCommunity = function (gistUser, gistId, entryName) {\n            var url = window.location.protocol + \"//bl.ocks.org/\" + gistUser + \"/raw/\" + gistId;\n            if(entryName != undefined) url += \"?nxentry=\" + entryName;\n\n            return {\n                \"communityMode\": true,\n                \"githubURL\": window.location.protocol + \"//bl.ocks.org/\" + gistUser + \"/\" + gistId,\n                \"externalURL\": $sce.trustAsResourceUrl(concatEnvToUrl(url)),\n                \"widgetURL\": $sce.trustAsResourceUrl(concatEnvToUrl(url))\n            }\n        }\n\n\n        this.getScopeParamsForNeXtProtGrails = function (path) {\n            /* np1Base: origin of NP1 http service, read from conf or set to localhost for dev/debug */\n            //var np1Base = \"http://localhost:8080/db/entry/\";\n            var np1Base = config.api.NP1_URL + \"/db\";\n            /* np2css: the css hiding header, footer and navigation items of NP1 page */\n            var np2css = \"/db/css/np2css.css\"; // NP1 integrated css (same as local)\n            //var np2css = \"http://localhost:3000/partials/viewer/np1np2.css\"; // UI local css\n            /* np2ori: the origin of the main frame (UI page) used as a base for relative links in iframe*/\n            var np2ori = window.location.origin;\n            /* np1Params: params to pass to NP1 */\n            var np1Params = \"?np2css=\" + np2css + \"&np2ori=\" + np2ori;\n\n            return {\n                \"communityMode\": false,\n                \"githubURL\": null,\n                \"externalURL\": np1Base + path,\n                \"widgetURL\": $sce.trustAsResourceUrl(np1Base + $location.$$path + np1Params)\n            }\n        }\n\n\n    }\n\n\n\n\n\n    })(angular); //global variable\n","'use strict';\n\nvar TrackingService = angular.module('np.tracker', []);\n\nTrackingService\n    .value('developTrackingId', 'UA-61448300-1')\n    .value('productionTrackingId', 'UA-61448300-2')\n\nTrackingService.factory('Tracker', [\n    '$window',\n    '$location',\n    '$routeParams',\n    'RELEASE_INFOS',\n    'developTrackingId','productionTrackingId',\n    function ($window, $location, $routeParams,\n              RELEASE_INFOS,\n              developTrackingId, productionTrackingId) {\n\n        var separator = '_';\n  \n        var tracker = {};\n\n        tracker.trackPageView = function () {\n            $window.ga('send', 'pageview', $location.url());\n        };\n\n        tracker.trackTransitionRouteChangeEvent = function(dest) {\n\n            var gaEvent = {\n                'hitType': 'event',\n                'eventCategory': 'ui'+separator+'routing-'+dest\n            };\n\n            if (Object.keys(gaEvent).length>0) {\n\n                console.log(\"tracking transition route -> ga event:\", gaEvent);\n                ga('send', gaEvent);\n            }\n        };\n\n        tracker.trackDownloadEvent = function (type, selectedFormat, selectedView) {\n            var gaEvent = {\n                'hitType': 'event',\n                'eventCategory': 'ui'+separator+'download'\n            };\n\n            if (typeof selectedFormat !== 'undefined') {\n                gaEvent.eventAction = gaEvent.eventCategory + separator + ((type != null) ? 'entries' : 'entry');\n                gaEvent.eventLabel = gaEvent.eventAction + separator + selectedView + \"-\" + selectedFormat;\n            } else {\n                gaEvent.eventAction = gaEvent.eventCategory + separator + type;\n            }\n\n            console.log(\"tracking download event -> ga event:\", gaEvent);\n            ga('send', gaEvent);\n        };\n\n        tracker.trackSaveAsListEvent = function (count, hasSucceed) {\n\n            if (!hasSucceed) {\n\n                var exceptionEvent = {\n                    'exDescription': 'could not save '+count+' entries as list',\n                    'exFatal': false,\n                    'appName': 'nextprot-ui',\n                    'appVersion': version\n                };\n\n                if (!isNaN(build))\n                    exceptionEvent.appVersion += \"-build.\"+RELEASE_INFOS.build;\n\n                console.log(\"tracking save as list exception -> ga event:\", exceptionEvent);\n                ga('send', 'exception', exceptionEvent);\n            } else {\n\n                var gaEvent = {\n                    'hitType': 'event',\n                    'eventCategory': 'ui'+separator+'save-as-list'\n                };\n\n                gaEvent.eventAction = gaEvent.eventCategory+separator+'size-'+count;\n\n                console.log(\"tracking save as list event -> ga event:\", gaEvent);\n                ga('send', gaEvent);\n            }\n        };\n\n        tracker.trackRouteChangeEvent = function() {\n\n            var factory = {};\n\n            if (\"query\" in $routeParams) {\n                factory = new SimpleSearchRouteEventFactory($routeParams.entity, $routeParams.query, $routeParams.filter, $routeParams.quality);\n            }\n            else if (\"sparql\" in $routeParams) {\n                factory = new AdvancedSparqlSearchRouteEventFactory($routeParams.filter);\n            }\n            else if (\"queryId\" in $routeParams) {\n\n                var queryId = $routeParams.queryId;\n                var type;\n\n                // predefined query\n                if (queryId.startsWith(\"NXQ_\")) {\n                    type = 'NXQ';\n                    queryId = 'NXQ_'+queryId.split(\"_\")[1];\n\n                    factory = new AdvancedQueryIdSearchRouteEventFactory(type, queryId, $routeParams.filter);\n                }\n                // private query\n                else {\n                    factory = new ShowListRouteEventFactory('query', $routeParams.filter);\n                }\n            }\n            else if (\"listId\" in $routeParams) {\n                factory = new ShowListRouteEventFactory('list', $routeParams.filter);\n            }\n            else if (\"article\" in $routeParams) {\n                factory = new HelpRouteEventFactory($routeParams.article);\n            }\n\n            if (Object.keys(factory).length > 0) {\n\n                var event = factory.create();\n\n                console.log(\"tracking route change category  event -> ga event:\", event);\n                ga('send', event);\n            }\n        };\n\n        tracker.trackContactUsEvent = function(subject) {\n\n            var gaEvent = {\n                'hitType': 'event',\n                'eventCategory': 'ui'+separator+'contact-us'\n            };\n\n            gaEvent.actionCategory = gaEvent.eventCategory+separator+subject;\n\n            console.log(\"tracking contacting us -> ga event:\", gaEvent);\n            ga('send', gaEvent);\n        };\n\n        function RouteEventFactory(funcCategory, funcAction, funcLabel) {\n\n            var factory = {};\n\n            factory.category = function () {\n\n                return 'ui' + separator + funcCategory()\n            };\n\n            factory.action = function () {\n\n                return 'ui' + separator + funcAction()\n            };\n\n            if (typeof funcLabel !== 'undefined') {\n\n                factory.label = function () {\n\n                    return 'ui' + separator + funcLabel()\n                };\n            }\n\n            function gaEvent(category, action, label) {\n\n                var event = {\n                    'hitType': 'event',\n                    'eventCategory': category,\n                    'eventAction': action\n                };\n\n                if (typeof label !== 'undefined')\n                    event.eventLabel = label;\n\n                return event;\n            }\n\n            factory.create = function () {\n\n                if ('label' in this)\n                    return new gaEvent(this.category(), this.action(), this.label());\n                else\n                    return new gaEvent(this.category(), this.action());\n            };\n\n            return factory;\n        }\n\n        function SearchRouteEventFactory(kind, type, filter) {\n\n            function category() {\n                return 'search' + separator + kind;\n            }\n\n            function action() {\n                var action = category() + separator + type;\n\n                if (typeof filter !== 'undefined')\n                    action += separator + \"filtered\";\n\n                return action;\n            }\n\n            return new RouteEventFactory(category, action);\n        }\n\n        function SimpleSearchRouteEventFactory(type, query, filter, silverPlus) {\n\n            var factory = new SearchRouteEventFactory('simple', type, filter);\n\n            var parentAction = factory.action();\n\n            factory.action = function () {\n\n                var action = parentAction;\n\n                if (typeof silverPlus !== 'undefined')\n                    action += separator + \"gold-and-silver\";\n\n                return action;\n            };\n\n            factory.label = function () {\n\n                return factory.action() + separator + query;\n            };\n\n            return factory;\n        }\n\n        function AdvancedSparqlSearchRouteEventFactory(filter) {\n\n            return new SearchRouteEventFactory('advanced', 'sparql', filter);\n        }\n\n        function AdvancedQueryIdSearchRouteEventFactory(type, queryId, filter) {\n\n            var factory = new SearchRouteEventFactory('advanced', type, filter);\n\n            if (typeof queryId !== 'undefined' && type == 'NXQ') {\n\n                factory.label = function () {\n\n                    return factory.action() + separator + queryId;\n                };\n            }\n            return factory;\n        }\n\n        function ShowListRouteEventFactory(type, filter) {\n\n            function category() {\n                return 'show' + separator + type;\n            }\n\n            function action() {\n                var action = category();\n\n                if (typeof filter !== 'undefined')\n                    action += separator + \"filtered\";\n\n                return action;\n            }\n\n            var factory = new RouteEventFactory(category, action);\n\n            if (typeof filter !== 'undefined') {\n                factory.label = function () {\n\n                    return factory.action() + separator + filter;\n                };\n            }\n\n            return factory;\n        }\n\n        function HelpRouteEventFactory(docname) {\n\n            function category() {\n                return 'help';\n            }\n\n            function action() {\n                return category() + separator + docname;\n            }\n\n            return new RouteEventFactory(category, action);\n        }\n\n        // The ga() function provides a single access point for everything in the analytics.js library\n        // all tracking calls are made via the ga() function\n        function createAndInitGATracker(propertyId) {\n\n            // Google Analytics\n            // Asynchronously loads the analytics.js library onto this page\n            (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n                m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n            })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\n            // Creates a new default tracker object\n            ga('create', propertyId, 'auto');\n        }\n\n        function getTrackingId() {\n\n            var trackingId = (RELEASE_INFOS.isProduction == \"true\") ? productionTrackingId : developTrackingId;\n\n            console.log('Tracking ids: { develop:', developTrackingId, ', production:', productionTrackingId, ', current tracking:', trackingId, '}');\n\n            return trackingId;\n        }\n\n        // Setup Universal Analytics Web Tracking (analytics.js)\n        createAndInitGATracker(getTrackingId());\n\n        // Sends a first pageview hit for the current page to Google Analytics\n        ga('send', 'pageview');\n\n        return tracker;\n    }]);\n\n","(function (angular, undefined) {'use strict';\n\nangular.module('np.user.application.service', [])\n\n\n.factory('UserApplication', [\n   '$resource',\n   '$http',\n   'config',\n   'user',\n   function($resource, $http, config, user) {\n\t   var baseUrl = config.api.BASE_URL+config.api.API_PORT,\n\t   \t\t $dao=$resource(baseUrl+'/nextprot-api-web/user/:username/user-application/:id',\n\t\t\t\t\t\t{username: '@username', id: '@id'}, {\n\t\t\t\t\t\tget: { method: 'GET', isArray: false },\n\t\t\t\t\t\tcreate: { method: 'POST' },\n\t\t\t\t\t\tupdate: { method: 'PUT'}\n\t   \t\t\t});\n\n\n/**\n       User.prototype.getApplications = function(user, cb) {\n\t   \t\tvar self=this;\n\t   \t\tuser.$promise.then(function(){\n\t\t\t   return self.$dao.get({username: user.profile.username}, function(data) {\n\t\t\t\t  service.lists = data;\n\t\t\t\t  if(cb)cb(data);\n\t\t\t   });\n\t   \t\t})\n\t   \t\treturn this;\n\t   };\n\n       UserApplication.prototype.create = function(user, application, cb) {\n   \t\tvar self=this;\n   \t\tuser.$promise.then(function(){\n\t\t   return self.$dao.create({ username: user.profile.username }, list, function(data) {\n\t\t\t\tif(cb)cb(data);\n\t\t\t});\n   \t\t})\n   \t\treturn this;\n\t   };\n\n       UserApplication.prototype.update = function(user, list, cb) {\n\t   \t  var self=this;\n\t   \t  user.$promise.then(function(){\n\t\t\treturn self.$dao.update({ username: user.profile.username, id: list.id }, list, function(data) {\n\t\t\t});\n   \t\t  })\n   \t\t  return this;\n\t\t};\n\n       UserApplication.prototype.delete = function(user, listId, cb) {\n\t   \t  var self=this;\n   \t\t  user.$promise.then(function(){\n\t\t\treturn self.$dao.delete({username: user.profile.username, id: listId}, function(data) {\n\t\t\t});\n   \t\t  })\n   \t\t  return this;\n\t\t}\n*/\n   }\n]);\n\n\n})(angular);\n","(function (angular, undefined) {'use strict';\n\nangular.module('np.user', [\n  'np.user.query',\n  'np.config'\n]).config(userConfig)\n  .factory('user', user)\n  .controller('UserCtrl',UserCtrl);\n\n    userConfig.$inject = ['$routeProvider'];\n    function userConfig($routeProvider) {\n        $routeProvider\n            .when('/user', {templateUrl: 'partials/user/user-profile.html'})\n            .when('/user/queries', {templateUrl: 'partials/user/user-queries.html'})\n            .when('/user/queries/create', {templateUrl: 'partials/user/user-queries-create.html'})\n            .when('/user/applications', {templateUrl: 'partials/user/user-applications.html'})\n    }\n\n//\n// implement user factory\nuser.$inject=['$resource','$http','config','$timeout','$rootScope','$location','$cookieStore','auth','$q', 'ipCookie', '$window', 'store'];\nfunction user($resource, $http, config, $timeout, $rootScope, $location, $cookieStore, auth, $q, ipCookie, $window, store) {\n    //\n\n    // default user data for anonymous\n    var defaultProfile={\n        authorities : [],\n        username : 'Guest',\n        profile:{}\n    };\n\n\n    //See also the refresh token https://github.com/auth0/auth0-angular/blob/master/docs/refresh-token.md\n    $rootScope.$on('$locationChangeStart', function() {\n        if(ipCookie('nxprofile') != null){\n            user.copy(ipCookie('nxprofile'));\n        } else {\n            if ($window.location.hostname === \"localhost\") {\n                ipCookie.remove('nxprofile', { path: '/' });\n                ipCookie.remove('nxtoken', { path: '/' });\n            } else {\n                ipCookie.remove('nxprofile', { path: '/', domain: \".nextprot.org\" });\n                ipCookie.remove('nxtoken', { path: '/', domain: \".nextprot.org\" });\n            }\n        }\n    });\n\n    /*\n    $rootScope.$on('auth0.loginSuccess', function (event,auth) {\n        user.$promise=auth.profile\n        auth.getProfile().then(function(profile){\n         user.copy(profile)\n         })\n    });*/\n\n    //\n    // create user domain\n    var User = function () {\n\n        //'this' is the 'User' instance\n        // init the dao\n        this.dao={\n           $profile:$resource(config.api.baseUrl + '/user/me', {\n                get: { method: 'GET' }\n            })\n        };\n\n        //\n        // init user profile\n        this.profile={};\n        angular.extend(this.profile,defaultProfile);\n        /*\n         The $q.when() method creates a promise that is immediately resolved with the given value\n\n         http://stackoverflow.com/questions/16770821/how-does-angular-q-when-work\n\n         Calling $q.when takes a promise or any other type, if it is not a promise then it will wrap it in a\n         promise and call resolve. If you pass a value to it then it is never going to be rejected.\n\n         From the docs:\n         Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.\n         This is useful when you are dealing with an object that might or might not be a promise,\n         or if the promise comes from a source that can't be trusted.\n         */\n        this.$promise=$q.when(this);\n    };\n\n    //\n    //\n    User.prototype.isAnonymous = function () {\n        return this.profile.username === 'Guest';\n    };\n\n    //\n    // make the always User a promise of the dao usage\n    User.prototype.chain=function(promise){\n      this.$promise=this.$promise.then(function(){\n         return promise\n        },function(){\n         return promise\n        });\n      return this\n    };\n\n    User.prototype.copy = function(data) {\n        angular.extend(this.profile,defaultProfile, data);\n        this.profile.username=this.username=data.email;\n        return this;\n    };\n\n    User.prototype.clear = function() {\n        angular.copy(defaultProfile, this.profile);\n        return this;\n    };\n\n\n    User.prototype.login = function (cb) {\n        var self=this;\n\n        auth.signin({popup: true, icon:'img/np.png', authParams: {\n                scope: 'openid email name picture'\n            }},\n            function(profile, token) {\n                // Success callback\n                var expirationInDays = 730; // 730 days = 2 years\n                if ($window.location.hostname === \"localhost\") {\n                    ipCookie('nxprofile', profile, { path: '/', expires: expirationInDays });\n                    ipCookie('nxtoken', token, { path: '/', expires: expirationInDays });\n                } else {\n                    ipCookie('nxprofile', profile, { path: '/', domain: '.nextprot.org', expires: expirationInDays });\n                    ipCookie('nxtoken', token, { path: '/', domain: '.nextprot.org', expires: expirationInDays });\n                }\n                $location.path('/');\n\n                self.copy(auth.profile);\n                self.username=auth.email;\n                cb()\n\n            }, function(error) {\n            cb(error)\n        });\n\n        /*auth.signin({\n            popup: true,\n            icon:'img/np.png',\n            scope: 'openid email name picture' // This is if you want the full JWT\n        }).then(function() {\n            // Success callback\n            self.copy(auth.profile)\n            self.username=auth.email;\n            cb()\n        }, function(error) {\n            cb(error)\n        });*/\n    };\n\n    User.prototype.logout = function (cb) {\n        this.clear();\n        auth.signout();\n\n        if ($window.location.hostname === \"localhost\") {\n            ipCookie.remove('nxprofile', { path: '/' });\n            ipCookie.remove('nxtoken', { path: '/' });\n        } else {\n            ipCookie.remove('nxprofile', { path: '/', domain: \".nextprot.org\" });\n            ipCookie.remove('nxtoken', { path: '/', domain: \".nextprot.org\" });\n        }\n\n        //legacy remove if it exists (should be removed from June 2015)\n        store.remove('profile');\n        store.remove('token');\n\n    };\n\n\n    User.prototype.me = function (cb) {\n        var self=this;\n\n        return this.chain(this.dao.$profile.get( function (data) {\n                if(data.username){\n                    return self.copy(data)\n                }\n\n                //\n                // the passing token is wrong\n                //return self.clear()\n            }).$promise\n        );\n    };\n\n\n    var user = new User();\n    return user;\n}\n\n\n//\n// implement user controller\nUserCtrl.$inject=['$scope','user','flash','config','ipCookie'];\nfunction UserCtrl($scope, user, flash, config, ipCookie) {\n    $scope.user = user;\n}\n\n})(angular);\n","(function (angular, undefined) {\n    'use strict';\n\n    angular.module('np.user.protein.lists', [\n        'np.user.protein.lists.service',\n        'np.user.protein.lists.ui',\n        'np.flash',\n        'np.tracker'\n    ])\n\n//\n// configure this module\n        .config([\n            '$routeProvider',\n            '$locationProvider',\n            '$httpProvider',\n            function ($routeProvider) {\n                $routeProvider.when('/user/protein/lists', {templateUrl: 'partials/user/user-protein-lists.html'})\n                    .when('/user/protein/lists/create', {templateUrl: 'partials/user/user-protein-lists-create.html'})\n            }\n        ])\n        .controller('ListCtrl', ListCtrl)\n        .controller('ListCreateCtrl', ListCreateCtrl);\n\n//\n// Controller\n    ListCtrl.$inject = ['Tracker', '$scope', 'userProteinList', 'user', 'flash', 'config'];\n    function ListCtrl(Tracker, $scope, userProteinList, user, flash, config) {\n        $scope.userProteinList = userProteinList;\n        $scope.showCombine = false;\n        $scope.combineDisabled = true;\n        $scope.selected = {};\n        $scope.modal = {options: {edit: {title: 'Edit'}, create: {title: 'Create'}}, type: 'create'};\n        $scope.lists = [];\n        $scope.operators = [\"AND\", \"OR\", \"NOT_IN\"];\n        $scope.combination = {first: null, op: $scope.operators[0], second: null};\n        $scope.options = {\n            first: $scope.lists,\n            second: $scope.lists\n        }\n\n\n        $scope.loadMyLists = function () {\n            // why get a promise wrapped around the user object ?\n            // why not create a promise just here ???\n            user.$promise.then(function () {\n                userProteinList.list(user).$promise.then(function (data) {\n                    $scope.lists = data;\n                    $scope.initCombinationForm();\n                }, function (reason) {\n                    alert('Failed: ' + reason);\n                });\n            })\n        };\n\n        $scope.getListExportUrl = function (list) {\n            return config.api.API_URL + \"/export/lists/\" + list.publicId;\n        };\n\n        $scope.gaTrackDownloadList = function () {\n            Tracker.trackDownloadEvent('list');\n        };\n\n        $scope.initCombinationForm = function () {\n\n            $scope.$watch('combination.first', function (newVal, oldVal) {\n                $scope.options.second = $scope.lists.slice(0);\n\n                var index = $scope.options.second.indexOf(newVal);\n                if (index > -1)\n                    $scope.options.second.splice(index, 1);\n            });\n\n            $scope.$watch('combination.second', function (newVal, oldVal) {\n                $scope.options.first = $scope.lists.slice(0);\n\n                var index = $scope.options.first.indexOf(newVal);\n\n                if (index > -1)\n                    $scope.options.first.splice(index, 1);\n            });\n        };\n\n\n        $scope.modalDissmiss = function () {\n\n        };\n\n        $scope.switchCombine = function () {\n            var temp = $scope.combination.first;\n            $scope.combination.first = $scope.combination.second;\n            $scope.combination.second = temp;\n        };\n\n        $scope.launchModal = function (elem, action) {\n            $scope.selected = {};\n            if (action == 'edit') {\n                $scope.selected = $scope.lists[elem];\n                angular.extend($scope.selected, {index: elem});\n            }\n            angular.extend($scope.modal, {type: action});\n        };\n\n        $scope.saveModal = function () {\n\n            if ($scope.modal.type == 'edit') {\n                angular.extend($scope.lists[$scope.selected.index], $scope.selected);\n\n                var list = {\n                    id: $scope.selected.id,\n                    name: $scope.selected.name,\n                    description: $scope.selected.description\n                };\n\n                userProteinList.update(user, list).$promise.then(\n                    function () {\n                        flash(\"alert-success\", list.name + \" list was successfully updated\");\n                    },\n                    function (error) {\n                        flash(\"alert-warning\", error.message);\n                    }\n                )\n\n            } else if ($scope.modal.type == 'create') {\n                var newList = {name: $scope.selected.name, description: $scope.selected.description};\n\n                userProteinList.combine(\n                    user,\n                    newList,\n                    $scope.combination.first.name,\n                    $scope.combination.second.name,\n                    $scope.combination.op\n                ).$promise.then(function (returnedList) {\n                        returnedList.accessions = returnedList.accessionNumbers.length;\n                        $scope.lists.push(returnedList);\n                        $scope.options.first = $scope.options.second = $scope.lists;\n                        flash(\"alert-success\", newList.name + \" was successfully created\");\n                    }, function (error) {\n                        flash(\"alert-warning\", error.data.message);\n                    });\n            }\n        };\n\n        // Remove from list\n        function removeFromList(list, listId) {\n            for (var i = 0; i < list.length; i++) {\n                if (list[i].id === listId) {\n                    list.splice(i, 1);\n                    break;\n                }\n            }\n        }\n\n        $scope.delete = function (list) {\n\n            if (confirm(\"Are you sure you want to delete the \" + list.name + \" list ?\")) {\n                var listName = list.name;\n                var listId = list.id;\n                userProteinList.delete(user, listId).$promise.then(\n                    function () {\n                        removeFromList($scope.lists, listId);\n                        $scope.options.first = $scope.options.second = $scope.lists;\n                        flash(\"alert-success\", listName + \" was successfully deleted\");\n                    }, function (error) {\n                        flash(\"alert-warning\", error.data.message);\n                    }\n                )\n            }\n        }\n    }\n\n    ListCreateCtrl.$inject = ['$q', '$scope', '$rootScope', '$location', 'userProteinList', 'user', 'uploadListService', 'flash', '$log']\n    function ListCreateCtrl($q, $scope, $rootScope, $location, userProteinList, user, uploadListService, flash, $log) {\n\n        $scope.inputAccessions = \"\";\n        $scope.listName = \"\";\n\n        $scope.files = [];\n\n        $rootScope.$on('upload:loadstart', function () {\n            $log.info('Controller: on `loadstart`');\n        });\n\n        $rootScope.$on('upload:error', function () {\n            $log.info('Controller: on `error`');\n        });\n\n        $scope.createList = function () {\n\n            var list = {};\n\n            // get accessions from text area\n            if ($scope.inputAccessions.length > 0) {\n\n                var accessions = $scope.inputAccessions.split(\"\\n\");\n\n                list = {\n                    name: $scope.listName,\n                    description: $scope.listDescription,\n                    accessions: accessions\n                };\n            } else {\n                list = {\n                    name: $scope.listName,\n                    description: $scope.listDescription,\n                    accessions: []\n                }\n            }\n\n            userProteinList.create(user, list).$promise\n                .then(function (newList) {\n\n                    var promises = [$q.when(true)];\n\n                    for (var i = $scope.files.length - 1; i >= 0; i--) {\n                        promises.push(uploadListService.send(newList.id, $scope.files[i]));\n                    }\n\n                    $q.all(promises).then(function () {\n                        flash('alert-info', \"List \" + $scope.listName + \" created.\");\n                        $scope.files = [];\n                        $location.path('/user/protein/lists');\n                    }, function (o) {\n                        flash('alert-warning', \"List \" + $scope.listName + \" not created: \" + o.data.message)\n                    })\n                }, function (o) {\n                    flash('alert-warning', \"List \" + $scope.listName + \" not created: \" + o.data.message)\n                })\n\n        };\n\n        $scope.removeUploadFile = function (index) {\n            $scope.files.splice(index, 1);\n        };\n\n        $scope.isCreatable = function () {\n\n            return ($scope.listName != \"\" && ( $scope.files.length > 0 || $scope.inputAccessions.length > 0 ) );\n        };\n    }\n})(angular);\n\n\n","(function (angular, undefined) {\n    'use strict';\n\n// create the module and define one service\n    angular.module('np.user.protein.lists.service', [])\n        .factory('userProteinList', userProteinList)\n        .factory('uploadListService', uploadListService);\n\n\n//\n// implement the service\n    userProteinList.$inject = ['$resource', 'config', '$q'];\n    function userProteinList($resource, config, $q) {\n\n        var Proteins = function () {\n\n            this.$daoLists = $resource(config.api.API_URL + '/lists/:id',\n                {}, {\n                    get: {method: 'GET'},\n                    list: {method: 'GET', isArray: true}\n                });\n\n\n            this.$dao = $resource(config.api.API_URL + '/user/me/lists/:id/:action',\n                {id: '@id', action: '@action'}, {\n                    get: {method: 'GET', isArray: false},\n                    list: {method: 'GET', isArray: true},\n                    create: {method: 'POST'},\n                    update: {method: 'PUT'},\n                    fix: {method: 'PUT'}\n                });\n\n            //\n            // wrap promise to this object\n            this.$promise = $q.when(this)\n        };\n\n        Proteins.prototype.list = function (user) {\n            var self = this;\n            self.$promise = self.$dao.list({}).$promise;\n            self.$promise.then(function (data) {\n                // TODO: weird to refer service that is an instance of Proteins !!!\n                service.lists = data;\n            });\n            return self;\n        };\n\n        Proteins.prototype.create = function (user, list) {\n            var self = this;\n            self.$promise = self.$dao.create({}, list).$promise;\n            return self;\n        };\n\n        Proteins.prototype.update = function (user, list) {\n            var self = this;\n            self.$promise = self.$dao.update({id: list.id}, list).$promise;\n            return self;\n        };\n\n        Proteins.prototype.delete = function (user, listId) {\n            var self = this;\n            self.$promise = self.$dao.delete({id: listId}).$promise;\n            return self;\n        };\n\n        Proteins.prototype.getListByPublicId = function (listId) {\n            return this.$daoLists.get({id: listId}).$promise;\n        };\n\n        /*\n         Proteins.prototype.getByIds = function (user, list, cb) {\n         var self = this;\n         var params = {username: user.profile.username, id: list, action: 'ids'};\n         //TODO remove cb\n         self.$promise=self.$dao.get(params, function (result) {\n         if (cb) cb(result);\n         });\n         return self;\n         }\n         */\n\n        Proteins.prototype.combine = function (user, list, l1, l2, op) {\n            var self = this;\n            self.$promise = self.$dao.get({\n                action: 'combine',\n                username: user.profile.username,\n                listname: list.name,\n                description: list.description,\n                listname1: l1,\n                listname2: l2,\n                op: op\n            }).$promise;\n            return self;\n        };\n\n        Proteins.prototype.addElements = function (user, listName, accs, cb) {\n            var self = this;\n            //TODO remove cb and user promise\n            user.$promise.then(function () {\n                return self.$dao.fix({\n                    action: 'add',\n                    username: user.profile.username,\n                    list: listName\n                }, JSON.stringify(accs), function (data) {\n                    if (cb) cb(data);\n                });\n            });\n            return this;\n        };\n\n        Proteins.prototype.removeElements = function (user, listName, accs, cb) {\n            var self = this;\n            //TODO remove cb and user promise\n            return user.$promise.then(function () {\n                return self.$dao.fix({\n                    action: 'remove',\n                    username: user.profile.username,\n                    list: listName\n                }, JSON.stringify(accs), function (data) {\n                    if (cb) cb(data);\n                });\n            });\n        };\n        var service = new Proteins();\n        return service;\n    }\n\n// implement the service\n    uploadListService.$inject = ['config', '$q', '$http', '$rootScope', 'user', 'auth', 'ipCookie'];\n    function uploadListService(config, $q, $http, $rootScope, user, auth, ipCookie) {\n\n        $http.defaults.useXDomain = true;\n        delete $http.defaults.headers.common[\"X-Requested-With\"];\n\n        var UploadList = function () {\n        };\n        UploadList.prototype.send = function (listId, file, cb) {\n            var data = new FormData(),\n                xhr = new XMLHttpRequest(),\n                deferred = $q.defer(),\n                url = config.api.API_URL + '/user/me/lists/:id/upload';\n\n            // When the request starts.\n            xhr.onloadstart = function () {\n                $rootScope.$emit('upload:loadstart', xhr);\n            };\n\n            // When the request has failed.\n            xhr.onerror = function (e) {\n                $rootScope.$emit('upload:error', e);\n                console.log('errrr', e);\n                return deferred.reject(e, xhr)\n\n            };\n\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState == 4 && xhr.status > 305) {\n                    return deferred.reject(JSON.parse(xhr.responseText))\n                }\n                if (xhr.readyState === 4 && xhr.status === 200) {\n                    return deferred.resolve(xhr)\n                }\n            };\n\n            // Send to server, where we can then access it with $_FILES['file].\n            data.append('file', file, file.name);\n            xhr.open('POST', url.replace(':id', listId));\n\n            //xhr.setRequestHeader('Authorization','Bearer ' + auth.idToken);\n            xhr.setRequestHeader('Authorization', 'Bearer ' + ipCookie('nxtoken'));\n\n            xhr.send(data);\n            return deferred.promise;\n        };\n        return new UploadList();\n    }\n\n\n})(angular);\n","(function (angular, undefined) {\n    'use strict';\n\n    angular.module('np.user.protein.lists.ui', [])\n\n        .directive('fadeOnHover', ['$parse', '$timeout', function ($parse, $timeout) {\n            return function (scope, element, attr) {\n                $timeout(function () {\n                    var e = angular.element(attr['fadeOnHover']);\n                    if (e.length) {\n                        e.bind('mouseenter', function () {\n                            element.fadeIn('fast');\n                        }).bind('mouseleave', function () {\n                            element.fadeOut('fast');\n                        });\n                    }\n                }, 60);\n                element.hide();\n            }\n        }])\n\n        .directive('upload', ['UploadManager', function factory(UploadManager) {\n            return {\n                restrict: 'A',\n                link: function (scope, element, attrs) {\n                    element.fileUpload({\n                        dataType: 'text',\n                        add: function (e, data) {\n                            UploadManager.add(data);\n                        }\n                    });\n                }\n            };\n        }])\n\n        .directive('fileChange', function () {\n            var linker = function ($scope, element, attributes) {\n\n                // onChange, push the files to $scope.files.\n                element.bind('change', function (event) {\n\n                    var files = event.target.files;\n\n                    $scope.$apply(function () {\n                        for (var i = 0, length = files.length; i < length; i++) {\n                            $scope.files.push(files[i]);\n                        }\n                    });\n                });\n            };\n\n            return {\n                restrict: 'A',\n                link: linker\n            };\n        });\n})(angular);\n","(function (angular, undefined) {\n    'use strict';\n\n\n    angular.module('np.user.query', ['np.tracker'])\n        .factory('queryRepository', queryRepository)\n        .controller('QueryRepositoryCtrl', QueryRepositoryCtrl)\n        .run(initQueryModule);\n\n\n    //\n    // init module\n    initQueryModule.$inject = ['$resource', 'config', 'user', '$q', '$cacheFactory'];\n    function initQueryModule($resource, config, user, $q, $cacheFactory) {\n        //\n        // data access\n        var $dao = {\n            queries: $resource(config.api.API_URL + '/user/me/queries/:id', {id: '@id'}, {\n                    get: {method: 'GET'},\n                    list: {method: 'GET', isArray: true},\n                    create: {method: 'POST'},\n                    update: {method: 'PUT'}\n                })\n        };\n\n        //\n        // repository of queries (TODO more cache access)\n        var queryList = $cacheFactory('queries'), queries=[];\n\n\n        //\n        // model for user sparql queries\n        var Query = function (data) {\n\n            // init this instance\n            this.userQueryId = data && data.userQueryId || undefined;\n            this.title = data && data.title || '';\n            this.published = data && Boolean(data.published) || false;\n            this.owner = data && data.owner || user.profile.username;\n            this.sparql = data && data.sparql || \"#Write your sparql query here\";\n            this.description = data && data.description || '';\n            this.tags = data && data.tags;\n\n            //\n            // wrap promise to this object\n            this.$promise = $q.when(this);\n\n            // save this instance\n            queryList.put(this.userQueryId, this)\n        };\n\n\n        //\n        // create a new query for this user\n        Query.prototype.createOne = function (init) {\n            return new Query(init);\n        };\n\n        //\n        // return current queries of this user\n        Query.prototype.queries = function () {\n            return queries;\n        };\n\n        Query.prototype.payload = function () {\n            return {\n                userQueryId: this.userQueryId,\n                title: this.title,\n                published: this.published,\n                owner: this.owner,\n                sparql: this.sparql,\n                description: this.description,\n                tags: this.tags\n            }\n        };\n        //\n        // check is this query is owned by the current user\n        Query.prototype.isOwner = Query.prototype.isEditable = function (who) {\n            return (this.owner.toLowerCase() == (who || user.profile.username).toLowerCase());\n        };\n\n        //\n        // CRUD operations\n        //\n\n        //\n        // list queries for this user\n        Query.prototype.list = function () {\n\n            var me = this, params = {};\n            me.$promise = $dao.queries.list(params).$promise\n            me.$promise.then(function (data) {\n                queries = data.map(function (q) {\n                    return me.createOne(q)\n                })\n            });\n            return this;\n        };\n\n        //\n        // save or create the current instance\n        Query.prototype.save = function () {\n            var params = {id: this.userQueryId};\n\n            // save this instance\n            queryList.put(this.userQueryId, this)\n\n            // on update\n            if (this.userQueryId) {\n                params.id = this.userQueryId;\n                return $dao.queries.update(params, this.payload())\n            } else {\n                return $dao.queries.create(params, this.payload())\n            }\n\n        };\n\n        //\n        // delete the current instance\n        Query.prototype.delete = function () {\n            var me = this, params = {id: this.userQueryId};\n            me.$promise = $dao.queries.delete(params).$promise\n            me.$promise.then(function(){\n              queries.every(function(query,i){\n                  if(query.userQueryId===me.userQueryId){\n                      return queries.splice(i,1);\n                  }\n                  return true;\n              })\n            });\n\n            return me;\n        };\n\n\n        // gets the query instance\n        Query.prototype.get = function (queryId) {\n            var self = this;\n            self.$promise=self.$dao.get({id: queryId}).$promise;\n            return self;\n       };\n\n        user.query = new Query();\n\n\n        return Query;\n\n    }\n\n//\n//\n    queryRepository.$inject = ['$resource', 'config', 'user', '$q'];\n    function queryRepository($resource, config, user, $q) {\n\n        var description = {\n            'public': 'This is the public repository',\n            'private': 'This is the private repository',\n            'nextprot': 'This is the nextprot repository'\n        };\n\n        var icons = {\n            'public': 'icon-globe',\n            'private': 'icon-user',\n            'tutorial': 'icon-certificate'\n        };\n\n        var QueryRepository = function () {\n            //  this.selectedQuery = {};\n            this.category = 'tutorial';\n            this.repository = {\n                show: true,\n                queries: [],\n                queriesTags: [],\n                filterTag: null,\n                selectedQuery: false\n            };\n\n            this.queries = {};\n\n            this.userQueryResource = $resource(config.api.API_URL + '/user/me/queries/:id', {}, {\n                    get: {method: 'GET'},\n                    list: {method: 'GET', isArray: true},\n                    create: {method: 'POST'},\n                    update: {method: 'PUT'},\n                    delete: {method: 'DELETE'}\n                });\n\n\n\n            this.$dao = { //should be removed!!!\n                queries: $resource(config.api.API_URL + '/user/me/queries.json',\n                    {}, {\n                        get: {method: 'GET'},\n                        list: {method: 'GET', isArray: true}\n                    })\n            };\n\n\n            this.$daoQueries = $resource(config.api.API_URL + '/queries/:id',\n                    {}, {\n                        get: {method: 'GET'},\n                        list: {method: 'GET', isArray: true}\n                    });\n\n            //\n            // wrap promise to this object\n            this.$promise = $q.when(this)\n\n        };\n\n\n        QueryRepository.prototype.getDescription = function (name) {\n            return description[this.category];\n        };\n\n        QueryRepository.prototype.getIcon = function (name) {\n            return icons[this.category];\n        };\n\n\n        QueryRepository.prototype.getTutorialQueries = function (name) {\n            return this.$daoQueries.list().$promise;\n        };\n\n        QueryRepository.prototype.list = function (category) {\n            var me = this;\n            this.category = category || 'tutorial';\n            this.$promise = this.$dao.queries.list({category: this.category}).$promise;\n            this.$promise.then(function (data) {\n                me.queries = data.map(function (q) {\n                    return user.query.createOne(q)\n                });\n                return me.queries\n            });\n            return this\n        };\n\n\n        // new method definitions (by Daniel)\n        QueryRepository.prototype.getQueryByPublicId = function (queryId) {\n            return this.$daoQueries.get({id: queryId}).$promise;\n        };\n\n        QueryRepository.prototype.deleteUserQuery = function (query) {\n            return this.userQueryResource.delete({id: query.userQueryId}).$promise;\n        };\n\n        QueryRepository.prototype.saveOrCreate = function (query) {\n            delete query.$promise;\n                if (query.userQueryId) {\n                    return this.userQueryResource.update({id: query.userQueryId}, query).$promise;\n                } else {\n                    return this.userQueryResource.create({}, query).$promise;\n                }\n\n            return this.userQueryResource.delete({id: query.userQueryId}).$promise;\n        };\n\n        return new QueryRepository();\n    }\n\n//\n//\n    QueryRepositoryCtrl.$inject = ['Tracker', '$scope', '$location', '$timeout', '$log','config', 'user', 'queryRepository', 'Search', 'flash']\n    function QueryRepositoryCtrl(Tracker, $scope, $location, $timeout, $log, config, user, queryRepository, Search, flash) {\n\n        // publish data\n        $scope.repository = queryRepository.repository;\n        $scope.queryRepository = queryRepository;\n\n        $scope.runQuery = function (query) {\n            $location.search(\"sparql\", query.sparql);\n        };\n\n        $scope.setFilterTag = function (tag) {\n            $scope.repository.filterTag = tag;\n        };\n\n        // publish function\n        $scope.showRepository = function () {\n            $scope.repository.selectedQuery = null;\n            $scope.repository.show = true;\n        };\n\n        // publish function\n        $scope.toggleRepository = function () {\n            $scope.repository.show = !$scope.repository.show;\n            $scope.repository.selectedQuery = null;\n        };\n\n        // publish function\n        $scope.showNewQuery = function () {\n            $scope.showRepository();\n            $scope.showNewQueryPanel((Search.params.sparql) ? {sparql: Search.params.sparql} : null);\n        };\n\n        // publish function\n        $scope.toggleNewQuery = function () {\n            $scope.toggleRepository();\n            $scope.showNewQueryPanel((Search.params.sparql) ? {sparql: Search.params.sparql} : null);\n        };\n\n        $scope.didyoumean = function (index) {\n\n            Search.params.query = Search.result.spellcheck.collations[index].query;\n\n            $scope.go();\n        };\n\n        $scope.loadQueries = function (category) {\n            queryRepository.getTutorialQueries().then(function (queries) {\n                $scope.repository.queries = queries;\n                $scope.setTags();\n            })\n        };\n\n        $scope.loadMyQueries = function () {\n          user.$promise.then(function(){\n              user.query.list().$promise.then(function (q) {\n                  $scope.repository.queries = user.query.queries\n              })\n\n          })\n        };\n\n        $scope.setModalQuery = function (query) {\n            $scope.selected = {};\n            angular.extend($scope.selected, query);\n        };\n\n        $scope.setTags = function () {\n            var queries = $scope.repository.queries;\n            var tags = [];\n            queries.forEach(function (query) {\n                query.tags.forEach(function (tag) {\n                        if (tags.indexOf(tag.trim()) == -1) {\n                            tags.push(tag)\n                        }\n                    }\n                )\n            });\n            angular.copy(tags,$scope.repository.queriesTags);\n        };\n\n\n        $scope.setCurrentQuery = function (query) {\n            $scope.repository.selectedQuery = query;\n        };\n\n        $scope.applyCurrentQueryForSearch = function (query) {\n            $location.search('sparql', '#' + query.title + \"\\n\" + query.sparql);\n            //close after that\n            $scope.repository.show = false;\n            $scope.repository.selectedQuery = false;\n        };\n\n        $scope.showNewQueryPanel = function (data) {\n            if(user.isAnonymous()){\n                flash(\"alert-warning\", \"Please login to create new queries\");\n            }else {\n                $scope.repository.selectedQuery = user.query.createOne(data);\n           }\n        };\n\n        $scope.saveSelectedQuery = function (query) {\n\n            var q = query || $scope.repository.selectedQuery;\n            if(!q.title || (q.title.length == 0)){//TODO check this at the level of the API and database\n                flash('alert-warning', 'Please give your query a title');\n           }else {\n\n                queryRepository.saveOrCreate(q).then(function () {\n                    flash('alert-info', q.title + ' saved successfully');\n                    $scope.loadQueries('tutorial'); //TODO should remove the entry from the list without having to call the api again\n                    $scope.repository.selectedQuery = false;\n                    $('.modal-backdrop').remove();//remove the modal backdrop if everything is fine\n                }, function(error){\n                    flash('alert-warning', error.data.message);\n                });\n\n            }\n        };\n\n        $scope.deleteUserQuery = function (query) {\n            if (confirm(\"Are you sure you want to delete the selected query?\")) {\n                queryRepository.deleteUserQuery(query).then(function () {\n                    $scope.loadQueries('tutorial'); //TODO should remove the entry from the list without having to call the api again\n                    flash('alert-info', query.title + 'query successfully deleted');\n                });\n            }\n        };\n\n\n        $scope.doSparqlSearch = function (query) {\n\n            $location.path(\"/proteins/search\");\n\n            $location.search(\"query\", null);\n            $location.search(\"mode\", \"advanced\");\n            $location.search(\"NXQ_ID\", query.userQueryId);\n\n        };\n\n        $scope.clearSelectedQuery = function () {\n            $scope.repository.selectedQuery = false;\n        };\n\n        $scope.gaTrackContactUsEvent = function(subject) {\n            Tracker.trackContactUsEvent(subject);\n        };\n    }\n\n\n})(angular); //global variable\n","'use strict';\n\nangular.module('np.version.directive', [])\n    .directive('npBuildVersion', ['RELEASE_INFOS', function (RELEASE_INFOS) {\n\n      return {\n        restrict: 'AE',\n        replace: true,\n        scope: {},\n        link: function(scope, element) {\n\n          var content = RELEASE_INFOS.version;\n\n          if (!isNaN(RELEASE_INFOS.build)) {\n\n            content += \" (build \" + RELEASE_INFOS.build;\n            if (RELEASE_INFOS.isProduction !== 'true') content += \"#\" + RELEASE_INFOS.githash;\n            content += \")\";\n          }\n\n          element.text(content);\n        }\n      }\n}]);\n","'use strict';\n\nangular.module('np.version', [\n    'np.version.directive'\n])\n\n.constant('RELEASE_INFOS', {\n    'version': '0.3.0',\n    \"isProduction\": 'IS_PRODUCTION', // i.e 'true'\n    'build': 'BUILD_NUMBER', // '926'\n    'githash': 'GIT_HASH' // 'e3a1a30'\n});"]}